{"_id":"shell","_rev":"91-826c854ba5bcafdb029cd47a17cfcc4c","name":"shell","description":"Full features and pretty console applications","dist-tags":{"latest":"0.3.2"},"versions":{"0.0.1":{"name":"shell","version":"0.0.1","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"}],"engines":{"node":">= 0.1.90"},"dependencies":{},"keywords":["console","colors","xterm"],"repository":{"type":"git","url":"git://github.com/wdavidw/node-shell.git"},"devDependencies":{},"_id":"shell@0.0.1","_engineSupported":true,"_npmVersion":"1.0.1rc9","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"300dd0d2640eaec349baf0af399397dd80a00e3c","tarball":"https://registry.npmjs.org/shell/-/shell-0.0.1.tgz"},"directories":{}},"0.0.2":{"name":"shell","version":"0.0.2","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"}],"engines":{"node":">= 0.1.90"},"dependencies":{},"keywords":["console","colors","xterm"],"repository":{"type":"git","url":"git://github.com/wdavidw/node-shell.git"},"devDependencies":{},"_id":"shell@0.0.2","_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"d9979d909a2c940521dcf01b144dc5d998c755c3","tarball":"https://registry.npmjs.org/shell/-/shell-0.0.2.tgz"},"scripts":{},"directories":{}},"0.0.3":{"name":"shell","version":"0.0.3","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"}],"engines":{"node":">= 0.1.90"},"dependencies":{},"keywords":["console","colors","xterm"],"repository":{"type":"git","url":"git://github.com/wdavidw/node-shell.git"},"devDependencies":{},"_id":"shell@0.0.3","_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"d24f70b194a8888d348a5802bb2d4eaca231adad","tarball":"https://registry.npmjs.org/shell/-/shell-0.0.3.tgz"},"scripts":{},"directories":{}},"0.0.5":{"name":"shell","version":"0.0.5","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"}],"engines":{"node":">= 0.1.90"},"dependencies":{},"keywords":["console","colors","xterm"],"repository":{"type":"git","url":"git://github.com/wdavidw/node-shell.git"},"devDependencies":{},"_id":"shell@0.0.5","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"1990bd5eb710eedf16228aaa8b25922e4cd72bff","tarball":"https://registry.npmjs.org/shell/-/shell-0.0.5.tgz"},"scripts":{},"directories":{}},"0.0.6":{"name":"shell","version":"0.0.6","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"}],"engines":{"node":">= 0.1.90"},"dependencies":{},"keywords":["console","colors","xterm"],"repository":{"type":"git","url":"git://github.com/wdavidw/node-shell.git"},"devDependencies":{},"_id":"shell@0.0.6","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"180e371eb11581b91702ed0660c31560b37303ff","tarball":"https://registry.npmjs.org/shell/-/shell-0.0.6.tgz"},"scripts":{},"directories":{}},"0.0.7":{"name":"shell","version":"0.0.7","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"}],"engines":{"node":">= 0.1.90"},"dependencies":{},"keywords":["console","colors","xterm"],"repository":{"type":"git","url":"git://github.com/wdavidw/node-shell.git"},"devDependencies":{},"_id":"shell@0.0.7","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"efac793468d632d02d60b73cb266451717c30a9c","tarball":"https://registry.npmjs.org/shell/-/shell-0.0.7.tgz"},"scripts":{},"directories":{}},"0.0.8":{"name":"shell","version":"0.0.8","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"}],"engines":{"node":">= 0.1.90"},"dependencies":{},"keywords":["console","colors","xterm"],"repository":{"type":"git","url":"git://github.com/wdavidw/node-shell.git"},"devDependencies":{},"_id":"shell@0.0.8","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"70b6a81fa0d2d26256af8c9bf19999bfb26db85d","tarball":"https://registry.npmjs.org/shell/-/shell-0.0.8.tgz"},"scripts":{},"directories":{}},"0.0.9":{"name":"shell","version":"0.0.9","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"}],"engines":{"node":">= 0.1.90"},"dependencies":{},"keywords":["console","colors","xterm"],"repository":{"type":"git","url":"git://github.com/wdavidw/node-shell.git"},"devDependencies":{},"_id":"shell@0.0.9","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"011df4ca61e6f07659b9b73bf5fd742cc0dc52cd","tarball":"https://registry.npmjs.org/shell/-/shell-0.0.9.tgz"},"scripts":{},"directories":{}},"0.1.0":{"name":"shell","version":"0.1.0","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"}],"engines":{"node":">= 0.1.90"},"dependencies":{"coffee-script":"latest"},"keywords":["console","colors","xterm"],"repository":{"type":"git","url":"git://github.com/wdavidw/node-shell.git"},"_npmJsonOpts":{"file":"/Users/wdavidw/.npm/shell/0.1.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"shell@0.1.0","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"3424f95f2ee0435edfed462935fd80c565c82e5d","tarball":"https://registry.npmjs.org/shell/-/shell-0.1.0.tgz"},"maintainers":[{"name":"david","email":"david@adaltas.com"}],"directories":{}},"0.1.1":{"name":"shell","version":"0.1.1","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"}],"engines":{"node":">= 0.1.90"},"dependencies":{"coffee-script":"latest"},"keywords":["console","colors","xterm"],"repository":{"type":"git","url":"git://github.com/wdavidw/node-shell.git"},"_npmJsonOpts":{"file":"/Users/wdavidw/.npm/shell/0.1.1/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"shell@0.1.1","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"f2da6c5176a404a38e98a835770820cb05a697a3","tarball":"https://registry.npmjs.org/shell/-/shell-0.1.1.tgz"},"maintainers":[{"name":"david","email":"david@adaltas.com"}],"directories":{}},"0.1.2":{"name":"shell","version":"0.1.2","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"}],"engines":{"node":">= 0.1.90"},"dependencies":{"coffee-script":"latest"},"keywords":["console","colors","xterm"],"repository":{"type":"git","url":"git://github.com/wdavidw/node-shell.git"},"_npmJsonOpts":{"file":"/Users/wdavidw/.npm/shell/0.1.2/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"shell@0.1.2","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"e1b05218c7fe9b4580d546cb182006a21a3677b0","tarball":"https://registry.npmjs.org/shell/-/shell-0.1.2.tgz"},"maintainers":[{"name":"david","email":"david@adaltas.com"}],"directories":{}},"0.2.0":{"name":"shell","version":"0.2.0","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"}],"engines":{"node":">= 0.1.90"},"dependencies":{"coffee-script":"latest","each":"latest","coffeekup":"latest"},"keywords":["console","colors","xterm"],"repository":{"type":"git","url":"git://github.com/wdavidw/node-shell.git"},"_npmJsonOpts":{"file":"/Users/wdavidw/.npm/shell/0.2.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"shell@0.2.0","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"4cb790ab6b00977e94954cda05adff3bb241929f","tarball":"https://registry.npmjs.org/shell/-/shell-0.2.0.tgz"},"maintainers":[{"name":"david","email":"david@adaltas.com"}],"directories":{}},"0.2.1":{"name":"shell","version":"0.2.1","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"}],"engines":{"node":">= 0.1.90"},"dependencies":{"coffee-script":"latest","each":"latest","pad":"latest","coffeekup":"latest"},"keywords":["console","colors","xterm"],"repository":{"type":"git","url":"git://github.com/wdavidw/node-shell.git"},"_npmJsonOpts":{"file":"/Users/wdavidw/.npm/shell/0.2.1/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"shell@0.2.1","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"e57d90b8e55c9abc522c6373e72427c7f7a71a83","tarball":"https://registry.npmjs.org/shell/-/shell-0.2.1.tgz"},"maintainers":[{"name":"david","email":"david@adaltas.com"}],"directories":{}},"0.2.2":{"name":"shell","version":"0.2.2","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"}],"engines":{"node":">= 0.1.90"},"dependencies":{"coffee-script":"latest","each":"latest","pad":"latest","coffeekup":"latest"},"keywords":["cli","console","colors","xterm"],"repository":{"type":"git","url":"git://github.com/wdavidw/node-shell.git"},"_npmUser":{"name":"david","email":"david@adaltas.com"},"_id":"shell@0.2.2","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.5.10","_defaultsLoaded":true,"dist":{"shasum":"293bc3e7947e68d59e5204255150d22df8ae1492","tarball":"https://registry.npmjs.org/shell/-/shell-0.2.2.tgz"},"maintainers":[{"name":"david","email":"david@adaltas.com"}],"directories":{}},"0.2.3":{"name":"shell","version":"0.2.3","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"},{"name":"Tony","email":"https://github.com/Zearin"},{"name":"Russ Frank","email":"https://github.com/russfrank"}],"engines":{"node":">= 0.1.90"},"dependencies":{"coffee-script":"latest","each":"latest","pad":"latest"},"keywords":["cli","console","colors","xterm"],"repository":{"type":"git","url":"git://github.com/wdavidw/node-shell.git"},"_npmUser":{"name":"david","email":"david@adaltas.com"},"_id":"shell@0.2.3","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-2","_nodeVersion":"v0.6.3","_defaultsLoaded":true,"dist":{"shasum":"e776dc9419ee8ed7436aa72f37462b9277186907","tarball":"https://registry.npmjs.org/shell/-/shell-0.2.3.tgz"},"maintainers":[{"name":"david","email":"david@adaltas.com"}],"directories":{}},"0.2.4":{"name":"shell","version":"0.2.4","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"},{"name":"Tony","email":"https://github.com/Zearin"},{"name":"Russ Frank","email":"https://github.com/russfrank"}],"engines":{"node":">= 0.1.90"},"dependencies":{"coffee-script":"latest","each":"latest","pad":"latest"},"devDependencies":{"express":"latest"},"keywords":["cli","console","colors","xterm"],"repository":{"type":"git","url":"git://github.com/wdavidw/node-shell.git"},"_npmUser":{"name":"david","email":"david@adaltas.com"},"_id":"shell@0.2.4","_engineSupported":true,"_npmVersion":"1.1.0-beta-10","_nodeVersion":"v0.6.7","_defaultsLoaded":true,"dist":{"shasum":"d0fc671161272e5fb5c408337a36d4df7ffe5aaa","tarball":"https://registry.npmjs.org/shell/-/shell-0.2.4.tgz"},"readme":"# Shell: applications with pluggable middleware\n\nShell brings a Connect inspired API, Express inspired routing, and other\nsimilar functionality to console based applications.\n\n* Run both in shell mode and command mode\n* First class citizen for console application (arrows, ctrl-a, ctrl-u,...)\n* User friendly with history, help messages and many other plugings\n* Foundation to structure and build complex based applications\n* Command matching, parameters and advanced functionnalities found in Express routing\n* Flexible architecture based on middlewares for plugin creation and routing enhancement\n* Familiar API for those of us using Connect or Express\n* Predifined commands with plugins for Redis, HTTP servers, Cloud9, CoffeeScript, ...\n\n## Installation\n\nShell is open source and licensed under the new BSD license.\n\n```bash\n    npm install shell\n```\n\n## Example: a simple Redis client\n\n```javascript\nvar shell = require('shell');\n// Initialization\nvar app = new shell( { chdir: __dirname } )\n// Middleware registration\napp.configure(function() {\n    app.use(function(req, res, next){\n        app.client = require('redis').createClient()\n        next()\n    });\n    app.use(shell.history({\n        shell: app\n    }));\n    app.use(shell.completer({\n        shell: app\n    }));\n    app.use(shell.redis({\n        config: 'redis.conf',\n        pidfile: 'redis.pid'\n    }));\n    app.use(shell.router({\n        shell: app\n    }));\n    app.use(shell.help({\n        shell: app,\n        introduction: true\n    }));\n});\n// Command registration\napp.cmd('redis keys :pattern', 'Find keys', function(req, res, next){\n    app.client.keys(req.params.pattern, function(err, keys){\n        if(err){ return res.styles.red(err.message), next(); }\n        res.cyan(keys.join('\\n')||'no keys');\n        res.prompt();\n    });\n});\n// Event notification\napp.on('quit', function(){\n    app.client.quit();\n});\n```\n\n## Creating and Configuring a Shell\n\n```javascript\nvar app = new shell();\napp.configure(function() {\n    app.use(shell.history({shell: app}));\n    app.use(shell.completer({shell: app}));\n    app.use(shell.help({shell: app, introduction: true}));\n});\napp.configure('prod', function() {\n    app.set('title', 'Production Mode');\n});\n```\n\n## Shell settings\n\nThe constructor `shell` takes an optional object. Options are:\n\n-   `chdir`      , Changes the current working directory of the process, a string of the directory, boolean true will default to the `workspace` (in which case `workspace` must be provided or discoverable)\n-   `prompt`     , Character for command prompt, Defaults to \">>\"\n-   `stdin`      , Source to read from\n-   `stdout`     , Destination to write to\n-   `env`        , Running environment, Defaults to the `env` setting (or `NODE_ENV` if defined, eg: `production`, `develepment`).\n-   `isShell`    , Detect whether the command is runned inside a shell are as a single command.\n-   `noPrompt`   , Do not prompt the user for a command, usefull to plug your own starting mechanisme (eg: starting with a question).\n-   `workspace`  , Project root directory or null if none was found. The discovery strategy start from the current working directory and traverse each parent dir looking for a `node_module` directory or a `package.json` file.\n\nShell settings may be set by calling `app.set('key', value)`.  They can be retrieved by calling the same function without a second argument.\n\n```javascript\nvar app = new shell({\n    chdir: true\n});\napp.set('env', 'prod');\napp.configure('prod', function() {\n    console.log(app.set('env'));\n});\n```\n\nAs with Express, `app.configure` allows the customization of plugins for all or specific environments, while `app.use` registers plugins.\n\nIf `app.configure` is called without specifying the environment as the first argument, the provided callback is always called. Otherwise, the environment must match the `env` setting or the global variable `NODE_ENV`.\n\n## Middlewares and plugins\n\nShell is build on a middleware architecute. When a command is issued, multiple callbacks are executed sequentially until one decide to stop the process  (calling `res.prompt()` or `shell.quit`. Those callbacks are called middlewares. A callback recieve 3 arguments: a `request` object, a `response` object and the next callback. Traditionnaly, `request` deals with `stdin` while `response` deals with `stdout`.\n\nA plugin is simply a function which configure and return a middleware. Same plugin also enrich the Shell application with new routes and functions.\n\n## Shell events\n\nThe following events may be emitted:\n\n-   `\"command\"`  , listen to all executed commands, provide the command name as first argument.\n-   `#{command}` , listen to a particular event.\n-   `\"quit\"`     , called when the application is about to quit.\n-   `\"error\"`    , called on error providing the error object as the first callback argument.\n-   `\"exit\"`     , called when the process exit.\n\n## Request parameter\n\nThe request object contains the following properties:\n\n-   `shell`   , (required) A reference to your shell application.\n-   `command` , Command entered by the user\n-   `params`  , Parameters object extracted from the command, defined by the `shell.router` middleware\n-   `qestion` , Ask questions with optionally suggested and default answers\n-   `confirm` , Ask a question expecting a boolean answer\n\n## Response parameter\n\nThe response object inherits from styles containing methods for printing, coloring and bolding:\n\nColors:\n\n-   `black`\n-   `white`\n-   `yellow`\n-   `blue`\n-   `cyan`\n-   `green`\n-   `magenta`\n-   `red`\n-   `bgcolor`\n-   `color`\n-   `nocolor`\n\nStyle:\n\n-   `regular`\n-   `weight`\n-   `bold`\n\nDisplay:\n\n\n-   `prompt`     , Exits the current command and return user to the prompt.\n-   `ln`         , Print a new line\n-   `print`      , Print a text\n-   `println`    , Print a text followed by a new line\n-   `reset`      , Stop any formating like color or bold\n-   `pad`        , Print a text with a fixed padding\n-   `raw`        , Return a text\n\n## Router plugin\n\nThe functionality provided by the 'routes' module is very similar to that of\nexpress.  Options passed during creation are:\n\n-   `shell`     , (required) A reference to your shell application.\n-\t `sensitive` , (optional) Defaults to `false`, set to `true` if the match should be case sensitive.\n\nNew routes are defined with the `cmd` method. A route is made of pattern against which the user command is matched, an optional description and one or more route specific middlewares to handle the command. The pattern is either a string or a regular expression. Middlewares receive three parameters: a request object, a response object, and a function. Command parameters are substituted and made available in the `params` object of the request parameter.\n\nParameters can have restrictions in parenthesis immediately following the\nkeyword, as in express: `:id([0-9]+)`.  See the `list` route in the example:\n\n```javascript\nvar app = new shell();\napp.configure(function(){\n    app.use(shell.router({\n        shell: app\n    }));\n});\n\n// Route middleware\nvar auth = function(req, res, next){\n\tif(req.params.uid == process.getuid()){\n\t\tnext()\n\t}else{\n\t\tthrow new Error('Not me');\n\t}\n}\n\n// Global parameter substitution\napp.param('uid', function(req, res, next){\n\texec('whoami', function(err, stdout, sdterr){\n\t\treq.params.username = stdout;\n\t\tnext();\n\t});\n});\n\n// Simple command\napp.cmd('help', function(req, res){\n\tres.cyan('Run this command `./ami user ' + process.getuid() + '`');\n\tres.prompt()\n});\n\n// Command with parameter\napp.cmd('user :uid', auth, function(req, res){\n\tres.cyan('Yes, you are ' + req.params.username);\n});\n\n// Command with contrained parameter\napp.cmd('user :id([0-9]+)', function(req, res) {\n   res.cyan('User id is ' + req.params.id);\n   res.prompt();\n});\n```\n\n## History plugin\n\nPersistent command history over multiple sessions. Options passed during creation are:\n\n-   `shell`    , (required) A reference to your shell application.\n-   `name`     , Identify your project history file, default to the hash of the exectuted file\n-\t`dir`      , Location of the history files, defaults to `\"#{process.env['HOME']}/.node_shell\"`\n\n## Completer plugin\n\nProvides tab completion. Options passed during creation are:\n\n-\t`shell`    , (required) A reference to your shell application.\n\n## Help plugin\n\nDisplay help when the user types \"help\" or runs commands without arguments. Command help is only displayed if a description was provided during the command registration. \n\nAdditionnaly, a new `shell.help()` function is made available. Options passed during creation are:\n\n-\t`shell`        , (required) A reference to your shell application.\n-\t`introduction` , Print message 'Type \"help\" or press enter for a list of commands' if boolean `true`, or a custom message if a `string`\n\n## HTTP server\n\nRegister two commands, `http start` and `http stop`. The start command will search for \"./server.js\" and \"./app.js\" (and additionnaly their CoffeeScript alternatives) to run by `node`.The following properties may be provided as settings:\n\n-\t`config`   , Path to the configuration file. Required to launch redis.\n-\t`attach`   , Wether the HTTP process should be attached to the current process. If not defined, default to `false` (the server run as a daemon).\n-\t`pidfile`  , Path to the file storing the daemon process id. Defaults to `\"/.node_shell/#{md5}.pid\"`\n-\t`stdout`   , Writable stream or file path to redirect the server stdout.\n-\t`stderr`   , Writable stream or file path to redirect the server stderr.\n-\t`workspace`, Project directory used to resolve relative paths and search for \"server\" and \"app\" scripts.\n\nExample:\n\n```javascript\nvar app = new shell();\napp.configure(function() {\n    app.use(shell.router({\n        shell: app\n    }));\n    app.use(shell.http({\n        shell: app\n    }));\n    app.use(shell.help({\n        shell: app,\n        introduction: true\n    }));\n});\n```\n\n## Redis plugin\n\nRegister two commands, `redis start` and `redis stop`. The following properties may be provided as settings:\n\n-\t`config`   , Path to the configuration file. Required to launch redis.\n-   `attach`   , Wether the Redis process should be attached to the current process. If not defined, default to `false` (the server run as a daemon).\n-\t`pidfile` Path to the file storing the daemon process id. Defaults to `\"/.node_shell/#{md5}.pid\"`\n-\t`stdout`   , Writable stream or file path to redirect cloud9 stdout.\n-\t`stderr`   , Writable stream or file path to redirect cloud9 stderr.\n\nExample:\n    \n```javascript\nvar app = new shell();\napp.configure(function() {\n    app.use(shell.router({\n        shell: app\n    }));\n    app.use(shell.redis({\n        shell: app,\n        config: __dirname+'/redis.conf')\n    }));\n    app.use(shell.help({\n        shell: app,\n        introduction: true\n    }));\n});\n```\n\n## Cloud9 plugin\n\nRegister two commands, `cloud9 start` and `cloud9 stop`. Unless provided, the Cloud9 workspace will be automatically discovered if your project root directory contains a \"package.json\" file or a \"node_module\" directory.\n\nOptions:\n\n-\t`config`   , Load the configuration from a config file. Overrides command-line options. Defaults to `null`.\n-\t`group`    , Run child processes with a specific group.\n-\t`user`     , Run child processes as a specific user.\n-\t`action`   , Define an action to execute after the Cloud9 server is started. Defaults to `null`.\n-\t`ip`       , IP address where Cloud9 will serve from. Defaults to `\"127.0.0.1\"`.\n-\t`port`     , Port number where Cloud9 will serve from. Defaults to `3000`.\n-\t`workspace`, Path to the workspace that will be loaded in Cloud9, Defaults to `Shell.set('workspace')`.\n-   `attach`   , Wether the Cloud9 process should be attached to the current process. If not defined, default to `false` (the server run as a daemon).\n-\t`pidfile` Path to the file storing the daemon process id. Defaults to `\"/.node_shell/#{md5}.pid\"`\n-\t`stdout`   , Writable stream or file path to redirect cloud9 stdout.\n-\t`stderr`   , Writable stream or file path to redirect cloud9 stderr.\n\nExample:\n    \n```javascript\nvar app = new shell();\napp.configure(function() {\n    app.use(shell.router({\n        shell: app\n    }));\n    app.use(shell.cloud9({\n        shell: app,\n        ip: '0.0.0.0'\n    }));\n    app.use(shell.help({\n        shell: app,\n        introduction: true\n    }));\n});\n```\n\n**Important:** If you encounter issue while installing cloud9, it might be because the npm module expect an older version of Node. \n\nHere's the procedure to use the latest version:\n\n```\ngit clone https://github.com/ajaxorg/cloud9.git\ncd cloud9\ngit submodule update --init --recursive\nnpm link\n```\n\n## CoffeeScript plugin\n\nStart Coffee in `--watch` mode, so scripts are instantly compiled into Javascript.\n\nOptions:\n\n-\t`src`      , Directory where \".coffee\" are stored. Each \".coffee\" script will be compiled into a .js JavaScript file of the same name.\n-\t`output` Directory where compiled JavaScript files are written. Used in conjunction with \"compile\".\n-\t`lint`     , If the `jsl` (JavaScript Lint) command is installed, use it to check the compilation of a CoffeeScript file.\n-\t`require`  , Load a library before compiling or executing your script. Can be used to hook in to the compiler (to add Growl notifications, for example).\n-   `attach`   , Wether the Coffee process should be attached to the current process. If not defined, default to `false` (the server run as a daemon).\n-\t`pidfile`  , Path to the file storing the daemon process id. Defaults to `\"/.node_shell/#{md5}.pid\"`\n-\t`stdout`   , Writable stream or file path to redirect cloud9 stdout.\n-\t`stderr`   , Writable stream or file path to redirect cloud9 stderr.\n-\t`workspace`, Project directory used to resolve relative paths.\n\nExample:\n\n```javascript\nvar app = new shell();\napp.configure(function() {\n    app.use(shell.router({\n        shell: app\n    }));\n    app.use(shell.coffee({\n        shell: app\n    }));\n    app.use(shell.help({\n        shell: app,\n        introduction: true\n    }));\n});\n```\n\n## Prompt route\n\nThe `prompt` route is a convenient function to stop command once a few routes are executed. You can simply pass the the `shell.routes.prompt` function or call it with a message argument.\n\n```javascript\nvar app = new shell();\napp.configure(function() {\n    app.use(shell.router({\n        shell: app\n    }));\n});\napp.cmd('install', [\n\tmy_app.routes.download,\n\tmy_app.routes.configure,\n    shell.routes.prompt('Installation is finished')\n]);\n```\n\n## Confirm route\n\nThe `confirm` route ask the user if he want to continue the process. If the answer is `true`, the following routes are executed. Otherwise, the process is stoped.\n\n```javascript\nvar app = new shell();\napp.configure(function() {\n    app.use(shell.router({\n        shell: app\n    }));\n});\napp.cmd('install', [\n    shell.routes.confirm('Do you confirm?'),\n    my_app.routes.download,\n\tmy_app.routes.configure\n]);\n```\n\n## Timeout route\n\nThe `timeout` route will wait for the provided period (in millisenconds) before executing the following route.\n\n```javascript\nvar app = new shell();\napp.configure(function() {\n    app.use(shell.router({\n        shell: app\n    }));\n});\napp.cmd('restart', [\n    my_app.routes.stop,\n    shell.routes.timeout(1000),\n    my_app.routes.start\n]);\n```\n\n\nContributors\n------------\n\n*   David Worms : <https://github.com/wdavidw>\n*   Tony: <https://github.com/Zearin>\n*   Russ Frank : <https://github.com/russfrank>\n","maintainers":[{"name":"david","email":"david@adaltas.com"}],"directories":{}},"0.2.5":{"name":"shell","version":"0.2.5","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"},{"name":"Tony","email":"https://github.com/Zearin"},{"name":"Russ Frank","email":"https://github.com/russfrank"}],"engines":{"node":">= 0.1.90"},"dependencies":{"coffee-script":"latest","each":"latest","pad":"latest"},"devDependencies":{"express":"latest"},"keywords":["cli","console","colors","xterm"],"repository":{"type":"git","url":"git://github.com/wdavidw/node-shell.git"},"_npmUser":{"name":"david","email":"david@adaltas.com"},"_id":"shell@0.2.5","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.9","_nodeVersion":"v0.6.13","_defaultsLoaded":true,"dist":{"shasum":"d735719604a7346b910332b8528e6c46a004b236","tarball":"https://registry.npmjs.org/shell/-/shell-0.2.5.tgz"},"readme":"# Shell: applications with pluggable middleware\n\nShell brings a Connect inspired API, Express inspired routing, and other\nsimilar functionality to console based applications.\n\n* Run both in shell mode and command mode\n* First class citizen for console application (arrows, ctrl-a, ctrl-u,...)\n* User friendly with history, help messages and many other plugings\n* Foundation to structure and build complex based applications\n* Command matching, parameters and advanced functionnalities found in Express routing\n* Flexible architecture based on middlewares for plugin creation and routing enhancement\n* Familiar API for those of us using Connect or Express\n* Predifined commands with plugins for Redis, HTTP servers, Cloud9, CoffeeScript, ...\n\n## Installation\n\nShell is open source and licensed under the new BSD license.\n\n```bash\n    npm install shell\n```\n\n## Example: a simple Redis client\n\n```javascript\nvar shell = require('shell');\n// Initialization\nvar app = new shell( { chdir: __dirname } )\n// Middleware registration\napp.configure(function() {\n    app.use(function(req, res, next){\n        app.client = require('redis').createClient()\n        next()\n    });\n    app.use(shell.history({\n        shell: app\n    }));\n    app.use(shell.completer({\n        shell: app\n    }));\n    app.use(shell.redis({\n        config: 'redis.conf',\n        pidfile: 'redis.pid'\n    }));\n    app.use(shell.router({\n        shell: app\n    }));\n    app.use(shell.help({\n        shell: app,\n        introduction: true\n    }));\n});\n// Command registration\napp.cmd('redis keys :pattern', 'Find keys', function(req, res, next){\n    app.client.keys(req.params.pattern, function(err, keys){\n        if(err){ return res.styles.red(err.message), next(); }\n        res.cyan(keys.join('\\n')||'no keys');\n        res.prompt();\n    });\n});\n// Event notification\napp.on('quit', function(){\n    app.client.quit();\n});\n```\n\n## Creating and Configuring a Shell\n\n```javascript\nvar app = shell();\napp.configure(function() {\n    app.use(shell.history({shell: app}));\n    app.use(shell.completer({shell: app}));\n    app.use(shell.help({shell: app, introduction: true}));\n});\napp.configure('prod', function() {\n    app.set('title', 'Production Mode');\n});\n```\n\n## Shell settings\n\nThe constructor `shell` takes an optional object. Options are:\n\n-   `chdir`      , Changes the current working directory of the process, a string of the directory, boolean true will default to the `workspace` (in which case `workspace` must be provided or discoverable)\n-   `prompt`     , Character for command prompt, Defaults to \">>\"\n-   `stdin`      , Source to read from\n-   `stdout`     , Destination to write to\n-   `env`        , Running environment, Defaults to the `env` setting (or `NODE_ENV` if defined, eg: `production`, `develepment`).\n-   `isShell`    , Detect whether the command is runned inside a shell are as a single command.\n-   `noPrompt`   , Do not prompt the user for a command, usefull to plug your own starting mechanisme (eg: starting with a question).\n-   `workspace`  , Project root directory or null if none was found. The discovery strategy start from the current working directory and traverse each parent dir looking for a `node_module` directory or a `package.json` file.\n\nShell settings may be set by calling `app.set('key', value)`.  They can be retrieved by calling the same function without a second argument.\n\n```javascript\nvar app = new shell({\n    chdir: true\n});\napp.set('env', 'prod');\napp.configure('prod', function() {\n    console.log(app.set('env'));\n});\n```\n\nAs with Express, `app.configure` allows the customization of plugins for all or specific environments, while `app.use` registers plugins.\n\nIf `app.configure` is called without specifying the environment as the first argument, the provided callback is always called. Otherwise, the environment must match the `env` setting or the global variable `NODE_ENV`.\n\n## Middlewares and plugins\n\nShell is build on a middleware architecute. When a command is issued, multiple callbacks are executed sequentially until one decide to stop the process  (calling `res.prompt()` or `shell.quit`. Those callbacks are called middlewares. A callback recieve 3 arguments: a `request` object, a `response` object and the next callback. Traditionnaly, `request` deals with `stdin` while `response` deals with `stdout`.\n\nA plugin is simply a function which configure and return a middleware. Same plugin also enrich the Shell application with new routes and functions.\n\n## Shell events\n\nThe following events may be emitted:\n\n-   `\"command\"`  , listen to all executed commands, provide the command name as first argument.\n-   `#{command}` , listen to a particular event.\n-   `\"quit\"`     , called when the application is about to quit.\n-   `\"error\"`    , called on error providing the error object as the first callback argument.\n-   `\"exit\"`     , called when the process exit.\n\n## Request parameter\n\nThe request object contains the following properties:\n\n-   `shell`   , (required) A reference to your shell application.\n-   `command` , Command entered by the user\n-   `params`  , Parameters object extracted from the command, defined by the `shell.router` middleware\n-   `qestion` , Ask questions with optionally suggested and default answers\n-   `confirm` , Ask a question expecting a boolean answer\n\n## Response parameter\n\nThe response object inherits from styles containing methods for printing, coloring and bolding:\n\nColors:\n\n-   `black`\n-   `white`\n-   `yellow`\n-   `blue`\n-   `cyan`\n-   `green`\n-   `magenta`\n-   `red`\n-   `bgcolor`\n-   `color`\n-   `nocolor`\n\nStyle:\n\n-   `regular`\n-   `weight`\n-   `bold`\n\nDisplay:\n\n\n-   `prompt`     , Exits the current command and return user to the prompt.\n-   `ln`         , Print a new line\n-   `print`      , Print a text\n-   `println`    , Print a text followed by a new line\n-   `reset`      , Stop any formating like color or bold\n-   `pad`        , Print a text with a fixed padding\n-   `raw`        , Return a text\n\n## Router plugin\n\nThe functionality provided by the 'routes' module is very similar to that of\nexpress.  Options passed during creation are:\n\n-   `shell`     , (required) A reference to your shell application.\n-\t `sensitive` , (optional) Defaults to `false`, set to `true` if the match should be case sensitive.\n\nNew routes are defined with the `cmd` method. A route is made of pattern against which the user command is matched, an optional description and one or more route specific middlewares to handle the command. The pattern is either a string or a regular expression. Middlewares receive three parameters: a request object, a response object, and a function. Command parameters are substituted and made available in the `params` object of the request parameter.\n\nParameters can have restrictions in parenthesis immediately following the\nkeyword, as in express: `:id([0-9]+)`.  See the `list` route in the example:\n\n```javascript\nvar app = new shell();\napp.configure(function(){\n    app.use(shell.router({\n        shell: app\n    }));\n});\n\n// Route middleware\nvar auth = function(req, res, next){\n\tif(req.params.uid == process.getuid()){\n\t\tnext()\n\t}else{\n\t\tthrow new Error('Not me');\n\t}\n}\n\n// Global parameter substitution\napp.param('uid', function(req, res, next){\n\texec('whoami', function(err, stdout, sdterr){\n\t\treq.params.username = stdout;\n\t\tnext();\n\t});\n});\n\n// Simple command\napp.cmd('help', function(req, res){\n\tres.cyan('Run this command `./ami user ' + process.getuid() + '`');\n\tres.prompt()\n});\n\n// Command with parameter\napp.cmd('user :uid', auth, function(req, res){\n\tres.cyan('Yes, you are ' + req.params.username);\n});\n\n// Command with contrained parameter\napp.cmd('user :id([0-9]+)', function(req, res) {\n   res.cyan('User id is ' + req.params.id);\n   res.prompt();\n});\n```\n\nContributors\n------------\n\n*   David Worms : <https://github.com/wdavidw>\n*   Tony: <https://github.com/Zearin>\n*   Russ Frank : <https://github.com/russfrank>\n","maintainers":[{"name":"david","email":"david@adaltas.com"}],"directories":{}},"0.2.6":{"name":"shell","version":"0.2.6","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"},{"name":"Tony","email":"https://github.com/Zearin"},{"name":"Russ Frank","email":"https://github.com/russfrank"}],"engines":{"node":">= 0.1.90"},"dependencies":{"coffee-script":"latest","each":"latest","pad":"latest"},"devDependencies":{"mocha":"latest","should":"latest"},"keywords":["cli","console","colors","xterm"],"repository":{"type":"git","url":"git://github.com/wdavidw/node-shell.git"},"scripts":{"test":"make test"},"_npmUser":{"name":"david","email":"david@adaltas.com"},"_id":"shell@0.2.6","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.9","_nodeVersion":"v0.6.13","_defaultsLoaded":true,"dist":{"shasum":"c3b0cf19be729ffde0a2a2f2231e45bf1294ca9a","tarball":"https://registry.npmjs.org/shell/-/shell-0.2.6.tgz"},"readme":"# Shell: applications with pluggable middleware\n\nShell brings a Connect inspired API, Express inspired routing, and other\nsimilar functionality to console based applications.\n\n* Run both in shell mode and command mode\n* First class citizen for console application (arrows, ctrl-a, ctrl-u,...)\n* User friendly with history, help messages and many other plugings\n* Foundation to structure and build complex based applications\n* Command matching, parameters and advanced functionnalities found in Express routing\n* Flexible architecture based on middlewares for plugin creation and routing enhancement\n* Familiar API for those of us using Connect or Express\n* Predifined commands with plugins for Redis, HTTP servers, Cloud9, CoffeeScript, ...\n\n## Installation\n\nShell is open source and licensed under the new BSD license.\n\n```bash\n    npm install shell\n```\n\n## Example: a simple Redis client\n\n```javascript\nvar shell = require('shell');\n// Initialization\nvar app = new shell( { chdir: __dirname } )\n// Middleware registration\napp.configure(function() {\n    app.use(function(req, res, next){\n        app.client = require('redis').createClient()\n        next()\n    });\n    app.use(shell.history({\n        shell: app\n    }));\n    app.use(shell.completer({\n        shell: app\n    }));\n    app.use(shell.redis({\n        config: 'redis.conf',\n        pidfile: 'redis.pid'\n    }));\n    app.use(shell.router({\n        shell: app\n    }));\n    app.use(shell.help({\n        shell: app,\n        introduction: true\n    }));\n});\n// Command registration\napp.cmd('redis keys :pattern', 'Find keys', function(req, res, next){\n    app.client.keys(req.params.pattern, function(err, keys){\n        if(err){ return res.styles.red(err.message), next(); }\n        res.cyan(keys.join('\\n')||'no keys');\n        res.prompt();\n    });\n});\n// Event notification\napp.on('quit', function(){\n    app.client.quit();\n});\n```\n\n## Creating and Configuring a Shell\n\n```javascript\nvar app = shell();\napp.configure(function() {\n    app.use(shell.history({shell: app}));\n    app.use(shell.completer({shell: app}));\n    app.use(shell.help({shell: app, introduction: true}));\n});\napp.configure('prod', function() {\n    app.set('title', 'Production Mode');\n});\n```\n\n## Shell settings\n\nThe constructor `shell` takes an optional object. Options are:\n\n-   `chdir`      , Changes the current working directory of the process, a string of the directory, boolean true will default to the `workspace` (in which case `workspace` must be provided or discoverable)\n-   `prompt`     , Character for command prompt, Defaults to \">>\"\n-   `stdin`      , Source to read from\n-   `stdout`     , Destination to write to\n-   `env`        , Running environment, Defaults to the `env` setting (or `NODE_ENV` if defined, eg: `production`, `develepment`).\n-   `isShell`    , Detect whether the command is runned inside a shell are as a single command.\n-   `noPrompt`   , Do not prompt the user for a command, usefull to plug your own starting mechanisme (eg: starting with a question).\n-   `workspace`  , Project root directory or null if none was found. The discovery strategy start from the current working directory and traverse each parent dir looking for a `node_module` directory or a `package.json` file.\n\nShell settings may be set by calling `app.set('key', value)`.  They can be retrieved by calling the same function without a second argument.\n\n```javascript\nvar app = new shell({\n    chdir: true\n});\napp.set('env', 'prod');\napp.configure('prod', function() {\n    console.log(app.set('env'));\n});\n```\n\nAs with Express, `app.configure` allows the customization of plugins for all or specific environments, while `app.use` registers plugins.\n\nIf `app.configure` is called without specifying the environment as the first argument, the provided callback is always called. Otherwise, the environment must match the `env` setting or the global variable `NODE_ENV`.\n\n## Middlewares and plugins\n\nShell is build on a middleware architecute. When a command is issued, multiple callbacks are executed sequentially until one decide to stop the process  (calling `res.prompt()` or `shell.quit`. Those callbacks are called middlewares. A callback recieve 3 arguments: a `request` object, a `response` object and the next callback. Traditionnaly, `request` deals with `stdin` while `response` deals with `stdout`.\n\nA plugin is simply a function which configure and return a middleware. Same plugin also enrich the Shell application with new routes and functions.\n\n## Shell events\n\nThe following events may be emitted:\n\n-   `\"command\"`  , listen to all executed commands, provide the command name as first argument.\n-   `#{command}` , listen to a particular event.\n-   `\"quit\"`     , called when the application is about to quit.\n-   `\"error\"`    , called on error providing the error object as the first callback argument.\n-   `\"exit\"`     , called when the process exit.\n\n## Request parameter\n\nThe request object contains the following properties:\n\n-   `shell`   , (required) A reference to your shell application.\n-   `command` , Command entered by the user\n-   `params`  , Parameters object extracted from the command, defined by the `shell.router` middleware\n-   `qestion` , Ask questions with optionally suggested and default answers\n-   `confirm` , Ask a question expecting a boolean answer\n\n## Response parameter\n\nThe response object inherits from styles containing methods for printing, coloring and bolding:\n\nColors:\n\n-   `black`\n-   `white`\n-   `yellow`\n-   `blue`\n-   `cyan`\n-   `green`\n-   `magenta`\n-   `red`\n-   `bgcolor`\n-   `color`\n-   `nocolor`\n\nStyle:\n\n-   `regular`\n-   `weight`\n-   `bold`\n\nDisplay:\n\n\n-   `prompt`     , Exits the current command and return user to the prompt.\n-   `ln`         , Print a new line\n-   `print`      , Print a text\n-   `println`    , Print a text followed by a new line\n-   `reset`      , Stop any formating like color or bold\n-   `pad`        , Print a text with a fixed padding\n-   `raw`        , Return a text\n\n## Router plugin\n\nThe functionality provided by the 'routes' module is very similar to that of\nexpress.  Options passed during creation are:\n\n-   `shell`     , (required) A reference to your shell application.\n-\t `sensitive` , (optional) Defaults to `false`, set to `true` if the match should be case sensitive.\n\nNew routes are defined with the `cmd` method. A route is made of pattern against which the user command is matched, an optional description and one or more route specific middlewares to handle the command. The pattern is either a string or a regular expression. Middlewares receive three parameters: a request object, a response object, and a function. Command parameters are substituted and made available in the `params` object of the request parameter.\n\nParameters can have restrictions in parenthesis immediately following the\nkeyword, as in express: `:id([0-9]+)`.  See the `list` route in the example:\n\n```javascript\nvar app = new shell();\napp.configure(function(){\n    app.use(shell.router({\n        shell: app\n    }));\n});\n\n// Route middleware\nvar auth = function(req, res, next){\n\tif(req.params.uid == process.getuid()){\n\t\tnext()\n\t}else{\n\t\tthrow new Error('Not me');\n\t}\n}\n\n// Global parameter substitution\napp.param('uid', function(req, res, next){\n\texec('whoami', function(err, stdout, sdterr){\n\t\treq.params.username = stdout;\n\t\tnext();\n\t});\n});\n\n// Simple command\napp.cmd('help', function(req, res){\n\tres.cyan('Run this command `./ami user ' + process.getuid() + '`');\n\tres.prompt()\n});\n\n// Command with parameter\napp.cmd('user :uid', auth, function(req, res){\n\tres.cyan('Yes, you are ' + req.params.username);\n});\n\n// Command with contrained parameter\napp.cmd('user :id([0-9]+)', function(req, res) {\n   res.cyan('User id is ' + req.params.id);\n   res.prompt();\n});\n```\n\nContributors\n------------\n\n*   David Worms : <https://github.com/wdavidw>\n*   Tony: <https://github.com/Zearin>\n*   Russ Frank : <https://github.com/russfrank>\n","maintainers":[{"name":"david","email":"david@adaltas.com"}],"directories":{}},"0.2.7":{"name":"shell","version":"0.2.7","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"},{"name":"Tony","email":"https://github.com/Zearin"},{"name":"Russ Frank","email":"https://github.com/russfrank"}],"engines":{"node":">= 0.8.0"},"dependencies":{"coffee-script":"latest","each":"latest","pad":"latest"},"devDependencies":{"mocha":"latest","should":"latest"},"keywords":["cli","console","colors","xterm"],"repository":{"type":"git","url":"https://github.com/wdavidw/node-shell.git"},"scripts":{"test":"make test"},"readme":"# Shell: applications with pluggable middleware\n\nShell brings a Connect inspired API, Express inspired routing, and other\nsimilar functionality to console based applications.\n\n* Run both in shell mode and command mode\n* First class citizen for console application (arrows, ctrl-a, ctrl-u,...)\n* User friendly with history, help messages and many other plugings\n* Foundation to structure and build complex based applications\n* Command matching, parameters and advanced functionnalities found in Express routing\n* Flexible architecture based on middlewares for plugin creation and routing enhancement\n* Familiar API for those of us using Connect or Express\n* Predifined commands with plugins for Redis, HTTP servers, Cloud9, CoffeeScript, ...\n\n## Installation\n\nShell is open source and licensed under the new BSD license.\n\n```bash\n    npm install shell\n```\n\n## Example: a simple Redis client\n\n```javascript\nvar shell = require('shell');\n// Initialization\nvar app = new shell( { chdir: __dirname } )\n// Middleware registration\napp.configure(function() {\n    app.use(function(req, res, next){\n        app.client = require('redis').createClient()\n        next()\n    });\n    app.use(shell.history({\n        shell: app\n    }));\n    app.use(shell.completer({\n        shell: app\n    }));\n    app.use(shell.redis({\n        config: 'redis.conf',\n        pidfile: 'redis.pid'\n    }));\n    app.use(shell.router({\n        shell: app\n    }));\n    app.use(shell.help({\n        shell: app,\n        introduction: true\n    }));\n});\n// Command registration\napp.cmd('redis keys :pattern', 'Find keys', function(req, res, next){\n    app.client.keys(req.params.pattern, function(err, keys){\n        if(err){ return res.styles.red(err.message), next(); }\n        res.cyan(keys.join('\\n')||'no keys');\n        res.prompt();\n    });\n});\n// Event notification\napp.on('quit', function(){\n    app.client.quit();\n});\n```\n\n## Creating and Configuring a Shell\n\n```javascript\nvar app = shell();\napp.configure(function() {\n    app.use(shell.history({shell: app}));\n    app.use(shell.completer({shell: app}));\n    app.use(shell.help({shell: app, introduction: true}));\n});\napp.configure('prod', function() {\n    app.set('title', 'Production Mode');\n});\n```\n\n## Shell settings\n\nThe constructor `shell` takes an optional object. Options are:\n\n-   `chdir`      , Changes the current working directory of the process, a string of the directory, boolean true will default to the `workspace` (in which case `workspace` must be provided or discoverable)\n-   `prompt`     , Character for command prompt, Defaults to \">>\"\n-   `stdin`      , Source to read from\n-   `stdout`     , Destination to write to\n-   `env`        , Running environment, Defaults to the `env` setting (or `NODE_ENV` if defined, eg: `production`, `develepment`).\n-   `isShell`    , Detect whether the command is runned inside a shell are as a single command.\n-   `noPrompt`   , Do not prompt the user for a command, usefull to plug your own starting mechanisme (eg: starting with a question).\n-   `workspace`  , Project root directory or null if none was found. The discovery strategy start from the current working directory and traverse each parent dir looking for a `node_module` directory or a `package.json` file.\n\nShell settings may be set by calling `app.set('key', value)`.  They can be retrieved by calling the same function without a second argument.\n\n```javascript\nvar app = new shell({\n    chdir: true\n});\napp.set('env', 'prod');\napp.configure('prod', function() {\n    console.log(app.set('env'));\n});\n```\n\nAs with Express, `app.configure` allows the customization of plugins for all or specific environments, while `app.use` registers plugins.\n\nIf `app.configure` is called without specifying the environment as the first argument, the provided callback is always called. Otherwise, the environment must match the `env` setting or the global variable `NODE_ENV`.\n\n## Middlewares and plugins\n\nShell is build on a middleware architecute. When a command is issued, multiple callbacks are executed sequentially until one decide to stop the process  (calling `res.prompt()` or `shell.quit`. Those callbacks are called middlewares. A callback recieve 3 arguments: a `request` object, a `response` object and the next callback. Traditionnaly, `request` deals with `stdin` while `response` deals with `stdout`.\n\nA plugin is simply a function which configure and return a middleware. Same plugin also enrich the Shell application with new routes and functions.\n\n## Shell events\n\nThe following events may be emitted:\n\n-   `\"command\"`  , listen to all executed commands, provide the command name as first argument.\n-   `#{command}` , listen to a particular event.\n-   `\"quit\"`     , called when the application is about to quit.\n-   `\"error\"`    , called on error providing the error object as the first callback argument.\n-   `\"exit\"`     , called when the process exit.\n\n## Request parameter\n\nThe request object contains the following properties:\n\n-   `shell`   , (required) A reference to your shell application.\n-   `command` , Command entered by the user\n-   `params`  , Parameters object extracted from the command, defined by the `shell.router` middleware\n-   `qestion` , Ask questions with optionally suggested and default answers\n-   `confirm` , Ask a question expecting a boolean answer\n\n## Response parameter\n\nThe response object inherits from styles containing methods for printing, coloring and bolding:\n\nColors:\n\n-   `black`\n-   `white`\n-   `yellow`\n-   `blue`\n-   `cyan`\n-   `green`\n-   `magenta`\n-   `red`\n-   `bgcolor`\n-   `color`\n-   `nocolor`\n\nStyle:\n\n-   `regular`\n-   `weight`\n-   `bold`\n\nDisplay:\n\n\n-   `prompt`     , Exits the current command and return user to the prompt.\n-   `ln`         , Print a new line\n-   `print`      , Print a text\n-   `println`    , Print a text followed by a new line\n-   `reset`      , Stop any formating like color or bold\n-   `pad`        , Print a text with a fixed padding\n-   `raw`        , Return a text\n\n## Router plugin\n\nThe functionality provided by the 'routes' module is very similar to that of\nexpress.  Options passed during creation are:\n\n-   `shell`     , (required) A reference to your shell application.\n-\t `sensitive` , (optional) Defaults to `false`, set to `true` if the match should be case sensitive.\n\nNew routes are defined with the `cmd` method. A route is made of pattern against which the user command is matched, an optional description and one or more route specific middlewares to handle the command. The pattern is either a string or a regular expression. Middlewares receive three parameters: a request object, a response object, and a function. Command parameters are substituted and made available in the `params` object of the request parameter.\n\nParameters can have restrictions in parenthesis immediately following the\nkeyword, as in express: `:id([0-9]+)`.  See the `list` route in the example:\n\n```javascript\nvar app = new shell();\napp.configure(function(){\n    app.use(shell.router({\n        shell: app\n    }));\n});\n\n// Route middleware\nvar auth = function(req, res, next){\n\tif(req.params.uid == process.getuid()){\n\t\tnext()\n\t}else{\n\t\tthrow new Error('Not me');\n\t}\n}\n\n// Global parameter substitution\napp.param('uid', function(req, res, next){\n\texec('whoami', function(err, stdout, sdterr){\n\t\treq.params.username = stdout;\n\t\tnext();\n\t});\n});\n\n// Simple command\napp.cmd('help', function(req, res){\n\tres.cyan('Run this command `./ami user ' + process.getuid() + '`');\n\tres.prompt()\n});\n\n// Command with parameter\napp.cmd('user :uid', auth, function(req, res){\n\tres.cyan('Yes, you are ' + req.params.username);\n});\n\n// Command with contrained parameter\napp.cmd('user :id([0-9]+)', function(req, res) {\n   res.cyan('User id is ' + req.params.id);\n   res.prompt();\n});\n```\n\nContributors\n------------\n\n*   David Worms : <https://github.com/wdavidw>\n*   Tony: <https://github.com/Zearin>\n*   Russ Frank : <https://github.com/russfrank>\n","_id":"shell@0.2.7","dist":{"shasum":"3e4ffb3d7be621e18ab44875d9e54a840ec3dfc5","tarball":"https://registry.npmjs.org/shell/-/shell-0.2.7.tgz"},"maintainers":[{"name":"david","email":"david@adaltas.com"}],"directories":{}},"0.2.9":{"name":"shell","version":"0.2.9","description":"Full features and pretty console applications","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"},{"name":"Tony","email":"https://github.com/Zearin"},{"name":"Russ Frank","email":"https://github.com/russfrank"}],"engines":{"node":">= 0.6.0"},"dependencies":{"coffee-script":"latest","each":"latest","pad":"latest","optimist":"latest"},"devDependencies":{"mocha":"latest","should":"latest"},"keywords":["cli","console","colors","xterm"],"repository":{"type":"git","url":"https://github.com/wdavidw/node-shell.git"},"scripts":{"test":"make test"},"readme":"# Shell: applications with pluggable middleware\n\nShell brings a Connect inspired API, Express inspired routing, and other\nsimilar functionality to console based applications.\n\n* Run both in shell mode and command mode\n* First class citizen for console application (arrows, ctrl-a, ctrl-u,...)\n* User friendly with history, help messages and many other plugings\n* Foundation to structure and build complex based applications\n* Command matching, parameters and advanced functionnalities found in Express routing\n* Flexible architecture based on middlewares for plugin creation and routing enhancement\n* Familiar API for those of us using Connect or Express\n* Predifined commands through plugins for Redis, HTTP servers, Cloud9, CoffeeScript, ...\n\nInstallation\n------------\n\nShell is open source and licensed under the new BSD license.\n\n```bash\nnpm install shell\n```\n\nQuick start\n-----------\n\nThe example below illustrate how to code a simple Redis client.\n\n```javascript\nvar shell = require('shell');\n// Initialization\nvar app = new shell( { chdir: __dirname } )\n// Middleware registration\napp.configure(function() {\n  app.use(function(req, res, next){\n    app.client = require('redis').createClient()\n    next()\n  });\n  app.use(shell.history({\n    shell: app\n  }));\n  app.use(shell.completer({\n    shell: app\n  }));\n  app.use(shell.redis({\n    config: 'redis.conf',\n    pidfile: 'redis.pid'\n  }));\n  app.use(shell.router({\n    shell: app\n  }));\n  app.use(shell.help({\n    shell: app,\n    introduction: true\n  }));\n});\n// Command registration\napp.cmd('redis keys :pattern', 'Find keys', function(req, res, next){\n  app.client.keys(req.params.pattern, function(err, keys){\n    if(err){ return res.styles.red(err.message), next(); }\n    res.cyan(keys.join('\\n')||'no keys');\n    res.prompt();\n  });\n});\n// Event notification\napp.on('quit', function(){\n  app.client.quit();\n});\n```\n\nCreating and Configuring a Shell\n--------------------------------\n\n```javascript\nvar app = shell();\napp.configure(function() {\n  app.use(shell.history({shell: app}));\n  app.use(shell.completer({shell: app}));\n  app.use(shell.help({shell: app, introduction: true}));\n});\napp.configure('prod', function() {\n  app.set('title', 'Production Mode');\n});\n```\n\nShell settings\n--------------\n\nThe constructor `shell` takes an optional object. Options are:\n\n-   `chdir`      , Changes the current working directory of the process, a string of the directory, boolean true will default to the `workspace` (in which case `workspace` must be provided or discoverable)\n-   `prompt`     , Character for command prompt, Defaults to \">>\"\n-   `stdin`      , Source to read from\n-   `stdout`     , Destination to write to\n-   `env`        , Running environment, Defaults to the `env` setting (or `NODE_ENV` if defined, eg: `production`, `develepment`).\n-   `isShell`    , Detect whether the command is runned inside a shell are as a single command.\n-   `noPrompt`   , Do not prompt the user for a command, usefull to plug your own starting mechanisme (eg: starting with a question).\n-   `workspace`  , Project root directory or null if none was found. The discovery strategy start from the current working directory and traverse each parent dir looking for a `node_module` directory or a `package.json` file.\n\nShell settings may be set by calling `app.set('key', value)`.  They can be retrieved by calling the same function without a second argument.\n\n```javascript\nvar app = new shell({\n  chdir: true\n});\napp.set('env', 'prod');\napp.configure('prod', function() {\n  console.log(app.set('env'));\n});\n```\n\nAs with Express, `app.configure` allows the customization of plugins for all or specific environments, while `app.use` registers plugins.\n\nIf `app.configure` is called without specifying the environment as the first argument, the provided callback is always called. Otherwise, the environment must match the `env` setting or the global variable `NODE_ENV`.\n\nMiddlewares and plugins\n-----------------------\n\nShell is build on a middleware architecture. When a command is issued, multiple callbacks are executed sequentially until one decide to stop the process  (calling `res.prompt()` or `shell.quit`. Those callbacks are called middlewares. A callback recieve 3 arguments: a `request` object, a `response` object and the next callback. Traditionnaly, `request` deals with `stdin` while `response` deals with `stdout`.\n\nA plugin is simply a function which configure and return a middleware. Same plugin also enrich the Shell application with new routes and functions.\n\nShell events\n------------\n\nThe following events may be emitted:\n\n-   `\"command\"`  , listen to all executed commands, provide the command name as first argument.\n-   `#{command}` , listen to a particular event.\n-   `\"quit\"`     , called when the application is about to quit.\n-   `\"error\"`    , called on error providing the error object as the first callback argument.\n-   `\"exit\"`     , called when the process exit.\n\nRequest parameter\n-----------------\n\nThe request object contains the following properties:\n\n-   `shell`   , (required) A reference to your shell application.\n-   `command` , Command entered by the user\n-   `params`  , Parameters object extracted from the command, defined by the `shell.router` middleware\n-   `qestion` , Ask questions with optionally suggested and default answers\n-   `confirm` , Ask a question expecting a boolean answer\n\nResponse parameter\n------------------\n\nThe response object inherits from styles containing methods for printing, coloring and bolding:\n\nColors:\n\n-   `black`\n-   `white`\n-   `yellow`\n-   `blue`\n-   `cyan`\n-   `green`\n-   `magenta`\n-   `red`\n-   `bgcolor`\n-   `color`\n-   `nocolor`\n\nStyle:\n\n-   `regular`\n-   `weight`\n-   `bold`\n\nDisplay:\n\n\n-   `prompt`     , Exits the current command and return user to the prompt.\n-   `ln`         , Print a new line\n-   `print`      , Print a text\n-   `println`    , Print a text followed by a new line\n-   `reset`      , Stop any formating like color or bold\n-   `pad`        , Print a text with a fixed padding\n-   `raw`        , Return a text\n\nRouter plugin\n-------------\n\nThe functionality provided by the 'routes' module is very similar to that of\nexpress.  Options passed during creation are:\n\n-   `shell`     , (required) A reference to your shell application.\n-   `sensitive` , (optional) Defaults to `false`, set to `true` if the match should be case sensitive.\n\nNew routes are defined with the `cmd` method. A route is made of pattern against which the user command is matched, an optional description and one or more route specific middlewares to handle the command. The pattern is either a string or a regular expression. Middlewares receive three parameters: a request object, a response object, and a function. Command parameters are substituted and made available in the `params` object of the request parameter.\n\nParameters can have restrictions in parenthesis immediately following the\nkeyword, as in express: `:id([0-9]+)`.  See the `list` route in the example:\n\n```javascript\nvar app = new shell();\napp.configure(function(){\n  app.use(shell.router({\n    shell: app\n  }));\n});\n\n// Route middleware\nvar auth = function(req, res, next){\n  if(req.params.uid == process.getuid()){\n    next()\n  }else{\n    throw new Error('Not me');\n  }\n}\n\n// Global parameter substitution\napp.param('uid', function(req, res, next){\n  exec('whoami', function(err, stdout, sdterr){\n    req.params.username = stdout;\n    next();\n  });\n});\n\n// Simple command\napp.cmd('help', function(req, res){\n  res.cyan('Run this command `./ami user ' + process.getuid() + '`');\n  res.prompt()\n});\n\n// Command with parameter\napp.cmd('user :uid', auth, function(req, res){\n  res.cyan('Yes, you are ' + req.params.username);\n});\n\n// Command with contrained parameter\napp.cmd('user :id([0-9]+)', function(req, res) {\n  res.cyan('User id is ' + req.params.id);\n  res.prompt();\n});\n```\n\nContributors\n------------\n\n*   David Worms : <https://github.com/wdavidw>\n*   Tony: <https://github.com/Zearin>\n*   Russ Frank : <https://github.com/russfrank>\n","_id":"shell@0.2.9","dist":{"shasum":"c173ce02e7c408f1987836010ef8a6fb00d41e1c","tarball":"https://registry.npmjs.org/shell/-/shell-0.2.9.tgz"},"maintainers":[{"name":"david","email":"david@adaltas.com"}],"directories":{}},"0.2.10":{"name":"shell","version":"0.2.10","description":"Full features and pretty console applications","homepage":"http://localhost:4000/projects/node-shell","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"},{"name":"Tony","email":"https://github.com/Zearin"},{"name":"Russ Frank","email":"https://github.com/russfrank"}],"engines":{"node":">= 0.6.0"},"dependencies":{"each":"latest","pad":"latest","optimist":"latest"},"devDependencies":{"coffee-script":"latest","mocha":"latest","should":"latest"},"keywords":["cli","console","colors","xterm"],"repository":{"type":"git","url":"https://github.com/wdavidw/node-shell.git"},"scripts":{"test":"make test"},"readme":"# Shell: applications with pluggable middleware\n\nShell brings a Connect inspired API, Express inspired routing, and other\nsimilar functionality to console based applications.\n\n* Run both in shell mode and command mode\n* First class citizen for console application (arrows, ctrl-a, ctrl-u,...)\n* User friendly with history, help messages and many other plugings\n* Foundation to structure and build complex based applications\n* Command matching, parameters and advanced functionnalities found in Express routing\n* Flexible architecture based on middlewares for plugin creation and routing enhancement\n* Familiar API for those of us using Connect or Express\n* Predifined commands through plugins for Redis, HTTP servers, Cloud9, CoffeeScript, ...\n\nInstallation\n------------\n\nShell is open source and licensed under the new BSD license.\n\n```bash\nnpm install shell\n```\n\nQuick start\n-----------\n\nThe example below illustrate how to code a simple Redis client.\n\n```javascript\nvar shell = require('shell');\n// Initialization\nvar app = new shell( { chdir: __dirname } )\n// Middleware registration\napp.configure(function() {\n  app.use(function(req, res, next){\n    app.client = require('redis').createClient()\n    next()\n  });\n  app.use(shell.history({\n    shell: app\n  }));\n  app.use(shell.completer({\n    shell: app\n  }));\n  app.use(shell.redis({\n    config: 'redis.conf',\n    pidfile: 'redis.pid'\n  }));\n  app.use(shell.router({\n    shell: app\n  }));\n  app.use(shell.help({\n    shell: app,\n    introduction: true\n  }));\n});\n// Command registration\napp.cmd('redis keys :pattern', 'Find keys', function(req, res, next){\n  app.client.keys(req.params.pattern, function(err, keys){\n    if(err){ return res.styles.red(err.message), next(); }\n    res.cyan(keys.join('\\n')||'no keys');\n    res.prompt();\n  });\n});\n// Event notification\napp.on('quit', function(){\n  app.client.quit();\n});\n```\n\nCreating and Configuring a Shell\n--------------------------------\n\n```javascript\nvar app = shell();\napp.configure(function() {\n  app.use(shell.history({shell: app}));\n  app.use(shell.completer({shell: app}));\n  app.use(shell.help({shell: app, introduction: true}));\n});\napp.configure('prod', function() {\n  app.set('title', 'Production Mode');\n});\n```\n\nShell settings\n--------------\n\nThe constructor `shell` takes an optional object. Options are:\n\n-   `chdir`      , Changes the current working directory of the process, a string of the directory, boolean true will default to the `workspace` (in which case `workspace` must be provided or discoverable)\n-   `prompt`     , Character for command prompt, Defaults to \">>\"\n-   `stdin`      , Source to read from\n-   `stdout`     , Destination to write to\n-   `env`        , Running environment, Defaults to the `env` setting (or `NODE_ENV` if defined, eg: `production`, `develepment`).\n-   `isShell`    , Detect whether the command is runned inside a shell are as a single command.\n-   `noPrompt`   , Do not prompt the user for a command, usefull to plug your own starting mechanisme (eg: starting with a question).\n-   `workspace`  , Project root directory or null if none was found. The discovery strategy start from the current working directory and traverse each parent dir looking for a `node_module` directory or a `package.json` file.\n\nShell settings may be set by calling `app.set('key', value)`.  They can be retrieved by calling the same function without a second argument.\n\n```javascript\nvar app = new shell({\n  chdir: true\n});\napp.set('env', 'prod');\napp.configure('prod', function() {\n  console.log(app.set('env'));\n});\n```\n\nAs with Express, `app.configure` allows the customization of plugins for all or specific environments, while `app.use` registers plugins.\n\nIf `app.configure` is called without specifying the environment as the first argument, the provided callback is always called. Otherwise, the environment must match the `env` setting or the global variable `NODE_ENV`.\n\nMiddlewares and plugins\n-----------------------\n\nShell is build on a middleware architecture. When a command is issued, multiple callbacks are executed sequentially until one decide to stop the process  (calling `res.prompt()` or `shell.quit`. Those callbacks are called middlewares. A callback recieve 3 arguments: a `request` object, a `response` object and the next callback. Traditionnaly, `request` deals with `stdin` while `response` deals with `stdout`.\n\nA plugin is simply a function which configure and return a middleware. Same plugin also enrich the Shell application with new routes and functions.\n\nShell events\n------------\n\nThe following events may be emitted:\n\n-   `\"command\"`  , listen to all executed commands, provide the command name as first argument.\n-   `#{command}` , listen to a particular event.\n-   `\"quit\"`     , called when the application is about to quit.\n-   `\"error\"`    , called on error providing the error object as the first callback argument.\n-   `\"exit\"`     , called when the process exit.\n\nRequest parameter\n-----------------\n\nThe request object contains the following properties:\n\n-   `shell`   , (required) A reference to your shell application.\n-   `command` , Command entered by the user\n-   `params`  , Parameters object extracted from the command, defined by the `shell.router` middleware\n-   `qestion` , Ask questions with optionally suggested and default answers\n-   `confirm` , Ask a question expecting a boolean answer\n\nResponse parameter\n------------------\n\nThe response object inherits from styles containing methods for printing, coloring and bolding:\n\nColors:\n\n-   `black`\n-   `white`\n-   `yellow`\n-   `blue`\n-   `cyan`\n-   `green`\n-   `magenta`\n-   `red`\n-   `bgcolor`\n-   `color`\n-   `nocolor`\n\nStyle:\n\n-   `regular`\n-   `weight`\n-   `bold`\n\nDisplay:\n\n\n-   `prompt`     , Exits the current command and return user to the prompt.\n-   `ln`         , Print a new line\n-   `print`      , Print a text\n-   `println`    , Print a text followed by a new line\n-   `reset`      , Stop any formating like color or bold\n-   `pad`        , Print a text with a fixed padding\n-   `raw`        , Return a text\n\nRouter plugin\n-------------\n\nThe functionality provided by the 'routes' module is very similar to that of\nexpress.  Options passed during creation are:\n\n-   `shell`     , (required) A reference to your shell application.\n-   `sensitive` , (optional) Defaults to `false`, set to `true` if the match should be case sensitive.\n\nNew routes are defined with the `cmd` method. A route is made of pattern against which the user command is matched, an optional description and one or more route specific middlewares to handle the command. The pattern is either a string or a regular expression. Middlewares receive three parameters: a request object, a response object, and a function. Command parameters are substituted and made available in the `params` object of the request parameter.\n\nParameters can have restrictions in parenthesis immediately following the\nkeyword, as in express: `:id([0-9]+)`.  See the `list` route in the example:\n\n```javascript\nvar app = new shell();\napp.configure(function(){\n  app.use(shell.router({\n    shell: app\n  }));\n});\n\n// Route middleware\nvar auth = function(req, res, next){\n  if(req.params.uid == process.getuid()){\n    next()\n  }else{\n    throw new Error('Not me');\n  }\n}\n\n// Global parameter substitution\napp.param('uid', function(req, res, next){\n  exec('whoami', function(err, stdout, sdterr){\n    req.params.username = stdout;\n    next();\n  });\n});\n\n// Simple command\napp.cmd('help', function(req, res){\n  res.cyan('Run this command `./ami user ' + process.getuid() + '`');\n  res.prompt()\n});\n\n// Command with parameter\napp.cmd('user :uid', auth, function(req, res){\n  res.cyan('Yes, you are ' + req.params.username);\n});\n\n// Command with contrained parameter\napp.cmd('user :id([0-9]+)', function(req, res) {\n  res.cyan('User id is ' + req.params.id);\n  res.prompt();\n});\n```\n\nContributors\n------------\n\n*   David Worms : <https://github.com/wdavidw>\n*   Tony: <https://github.com/Zearin>\n*   Russ Frank : <https://github.com/russfrank>\n","_id":"shell@0.2.10","dist":{"shasum":"44b06810d6a109ba925abacbdad3f918f00e2ffc","tarball":"https://registry.npmjs.org/shell/-/shell-0.2.10.tgz"},"maintainers":[{"name":"david","email":"david@adaltas.com"}],"directories":{}},"0.3.1":{"name":"shell","version":"0.3.1","description":"Full features and pretty console applications","homepage":"http://localhost:4000/projects/node-shell","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"},{"name":"Tony","email":"https://github.com/Zearin"},{"name":"Russ Frank","email":"https://github.com/russfrank"}],"engines":{"node":">= 0.6.0"},"dependencies":{"each":"latest","pad":"latest","optimist":"latest"},"devDependencies":{"coffee-script":"latest","mocha":"latest","should":"latest"},"keywords":["cli","console","colors","xterm"],"repository":{"type":"git","url":"https://github.com/wdavidw/node-shell.git"},"scripts":{"test":"make test"},"readme":"# Shell: applications with pluggable middleware\n\nShell brings a Connect inspired API, Express inspired routing, and other\nsimilar functionality to console based applications.\n\n* Run both in shell mode and command mode\n* First class citizen for console application (arrows, ctrl-a, ctrl-u,...)\n* User friendly with history, help messages and many other plugings\n* Foundation to structure and build complex based applications\n* Command matching, parameters and advanced functionnalities found in Express routing\n* Flexible architecture based on middlewares for plugin creation and routing enhancement\n* Familiar API for those of us using Connect or Express\n* Predifined commands through plugins for Redis, HTTP servers, Cloud9, CoffeeScript, ...\n\nInstallation\n------------\n\nShell is open source and licensed under the new BSD license.\n\n```bash\nnpm install shell\n```\n\nQuick start\n-----------\n\nThe example below illustrate how to code a simple Redis client.\n\n```javascript\nvar shell = require('shell');\n// Initialization\nvar app = new shell( { chdir: __dirname } )\n// Middleware registration\napp.configure(function() {\n  app.use(function(req, res, next){\n    app.client = require('redis').createClient()\n    next()\n  });\n  app.use(shell.history({\n    shell: app\n  }));\n  app.use(shell.completer({\n    shell: app\n  }));\n  app.use(shell.redis({\n    config: 'redis.conf',\n    pidfile: 'redis.pid'\n  }));\n  app.use(shell.router({\n    shell: app\n  }));\n  app.use(shell.help({\n    shell: app,\n    introduction: true\n  }));\n});\n// Command registration\napp.cmd('redis keys :pattern', 'Find keys', function(req, res, next){\n  app.client.keys(req.params.pattern, function(err, keys){\n    if(err){ return res.styles.red(err.message), next(); }\n    res.cyan(keys.join('\\n')||'no keys');\n    res.prompt();\n  });\n});\n// Event notification\napp.on('quit', function(){\n  app.client.quit();\n});\n```\n\nCreating and Configuring a Shell\n--------------------------------\n\n```javascript\nvar app = shell();\napp.configure(function() {\n  app.use(shell.history({shell: app}));\n  app.use(shell.completer({shell: app}));\n  app.use(shell.help({shell: app, introduction: true}));\n});\napp.configure('prod', function() {\n  app.set('title', 'Production Mode');\n});\n```\n\nShell settings\n--------------\n\nThe constructor `shell` takes an optional object. Options are:\n\n-   `chdir`      , Changes the current working directory of the process, a string of the directory, boolean true will default to the `workspace` (in which case `workspace` must be provided or discoverable)\n-   `prompt`     , Character for command prompt, Defaults to \">>\"\n-   `stdin`      , Source to read from\n-   `stdout`     , Destination to write to\n-   `env`        , Running environment, Defaults to the `env` setting (or `NODE_ENV` if defined, eg: `production`, `develepment`).\n-   `isShell`    , Detect whether the command is runned inside a shell are as a single command.\n-   `noPrompt`   , Do not prompt the user for a command, usefull to plug your own starting mechanisme (eg: starting with a question).\n-   `workspace`  , Project root directory or null if none was found. The discovery strategy start from the current working directory and traverse each parent dir looking for a `node_module` directory or a `package.json` file.\n\nShell settings may be set by calling `app.set('key', value)`.  They can be retrieved by calling the same function without a second argument.\n\n```javascript\nvar app = new shell({\n  chdir: true\n});\napp.set('env', 'prod');\napp.configure('prod', function() {\n  console.log(app.set('env'));\n});\n```\n\nAs with Express, `app.configure` allows the customization of plugins for all or specific environments, while `app.use` registers plugins.\n\nIf `app.configure` is called without specifying the environment as the first argument, the provided callback is always called. Otherwise, the environment must match the `env` setting or the global variable `NODE_ENV`.\n\nMiddlewares and plugins\n-----------------------\n\nShell is build on a middleware architecture. When a command is issued, multiple callbacks are executed sequentially until one decide to stop the process  (calling `res.prompt()` or `shell.quit`. Those callbacks are called middlewares. A callback recieve 3 arguments: a `request` object, a `response` object and the next callback. Traditionnaly, `request` deals with `stdin` while `response` deals with `stdout`.\n\nA plugin is simply a function which configure and return a middleware. Same plugin also enrich the Shell application with new routes and functions.\n\nShell events\n------------\n\nThe following events may be emitted:\n\n-   `\"command\"`  , listen to all executed commands, provide the command name as first argument.\n-   `#{command}` , listen to a particular event.\n-   `\"quit\"`     , called when the application is about to quit.\n-   `\"error\"`    , called on error providing the error object as the first callback argument.\n-   `\"exit\"`     , called when the process exit.\n\nRequest parameter\n-----------------\n\nThe request object contains the following properties:\n\n-   `shell`   , (required) A reference to your shell application.\n-   `command` , Command entered by the user\n-   `params`  , Parameters object extracted from the command, defined by the `shell.router` middleware\n-   `qestion` , Ask questions with optionally suggested and default answers\n-   `confirm` , Ask a question expecting a boolean answer\n\nResponse parameter\n------------------\n\nThe response object inherits from styles containing methods for printing, coloring and bolding:\n\nColors:\n\n-   `black`\n-   `white`\n-   `yellow`\n-   `blue`\n-   `cyan`\n-   `green`\n-   `magenta`\n-   `red`\n-   `bgcolor`\n-   `color`\n-   `nocolor`\n\nStyle:\n\n-   `regular`\n-   `weight`\n-   `bold`\n\nDisplay:\n\n\n-   `prompt`     , Exits the current command and return user to the prompt.\n-   `ln`         , Print a new line\n-   `print`      , Print a text\n-   `println`    , Print a text followed by a new line\n-   `reset`      , Stop any formating like color or bold\n-   `pad`        , Print a text with a fixed padding\n-   `raw`        , Return a text\n\nRouter plugin\n-------------\n\nThe functionality provided by the 'routes' module is very similar to that of\nexpress.  Options passed during creation are:\n\n-   `shell`     , (required) A reference to your shell application.\n-   `sensitive` , (optional) Defaults to `false`, set to `true` if the match should be case sensitive.\n\nNew routes are defined with the `cmd` method. A route is made of pattern against which the user command is matched, an optional description and one or more route specific middlewares to handle the command. The pattern is either a string or a regular expression. Middlewares receive three parameters: a request object, a response object, and a function. Command parameters are substituted and made available in the `params` object of the request parameter.\n\nParameters can have restrictions in parenthesis immediately following the\nkeyword, as in express: `:id([0-9]+)`.  See the `list` route in the example:\n\n```javascript\nvar app = new shell();\napp.configure(function(){\n  app.use(shell.router({\n    shell: app\n  }));\n});\n\n// Route middleware\nvar auth = function(req, res, next){\n  if(req.params.uid == process.getuid()){\n    next()\n  }else{\n    throw new Error('Not me');\n  }\n}\n\n// Global parameter substitution\napp.param('uid', function(req, res, next){\n  exec('whoami', function(err, stdout, sdterr){\n    req.params.username = stdout;\n    next();\n  });\n});\n\n// Simple command\napp.cmd('help', function(req, res){\n  res.cyan('Run this command `./ami user ' + process.getuid() + '`');\n  res.prompt()\n});\n\n// Command with parameter\napp.cmd('user :uid', auth, function(req, res){\n  res.cyan('Yes, you are ' + req.params.username);\n});\n\n// Command with contrained parameter\napp.cmd('user :id([0-9]+)', function(req, res) {\n  res.cyan('User id is ' + req.params.id);\n  res.prompt();\n});\n```\n\nContributors\n------------\n\n*   David Worms : <https://github.com/wdavidw>\n*   Tony: <https://github.com/Zearin>\n*   Russ Frank : <https://github.com/russfrank>\n","_id":"shell@0.3.1","dist":{"shasum":"ae9e12d0f272ed01d9effa441e76426218a7fd8c","tarball":"https://registry.npmjs.org/shell/-/shell-0.3.1.tgz"},"maintainers":[{"name":"david","email":"david@adaltas.com"}],"directories":{}},"0.3.2":{"name":"shell","version":"0.3.2","description":"Full features and pretty console applications","homepage":"http://www.adaltas.com/projects/node-shell","author":{"name":"David Worms","email":"david@adaltas.com"},"contributors":[{"name":"David Worms","email":"david@adaltas.com"},{"name":"Tony","email":"https://github.com/Zearin"},{"name":"Russ Frank","email":"https://github.com/russfrank"}],"engines":{"node":">= 0.6.0"},"dependencies":{"each":"latest","pad":"latest","optimist":"latest"},"devDependencies":{"coffee-script":"latest","mocha":"latest","should":"latest"},"keywords":["cli","console","colors","xterm","args","argument"],"repository":{"type":"git","url":"https://github.com/wdavidw/node-shell.git"},"scripts":{"test":"make test"},"readme":"# Shell: applications with pluggable middleware\n\nShell brings a Connect inspired API, Express inspired routing, and other\nsimilar functionality to console based applications.\n\n* Run both in shell mode and command mode\n* First class citizen for console application (arrows, ctrl-a, ctrl-u,...)\n* User friendly with history, help messages and many other plugings\n* Foundation to structure and build complex based applications\n* Command matching, parameters and advanced functionnalities found in Express routing\n* Flexible architecture based on middlewares for plugin creation and routing enhancement\n* Familiar API for those of us using Connect or Express\n* Predifined commands through plugins for Redis, HTTP servers, Cloud9, CoffeeScript, ...\n\nInstallation\n------------\n\nShell is open source and licensed under the new BSD license.\n\n```bash\nnpm install shell\n```\n\nQuick start\n-----------\n\nThe example below illustrate how to code a simple Redis client.\n\n```javascript\nvar shell = require('shell');\n// Initialization\nvar app = new shell( { chdir: __dirname } )\n// Middleware registration\napp.configure(function() {\n  app.use(function(req, res, next){\n    app.client = require('redis').createClient()\n    next()\n  });\n  app.use(shell.history({\n    shell: app\n  }));\n  app.use(shell.completer({\n    shell: app\n  }));\n  app.use(shell.redis({\n    config: 'redis.conf',\n    pidfile: 'redis.pid'\n  }));\n  app.use(shell.router({\n    shell: app\n  }));\n  app.use(shell.help({\n    shell: app,\n    introduction: true\n  }));\n});\n// Command registration\napp.cmd('redis keys :pattern', 'Find keys', function(req, res, next){\n  app.client.keys(req.params.pattern, function(err, keys){\n    if(err){ return res.styles.red(err.message), next(); }\n    res.cyan(keys.join('\\n')||'no keys');\n    res.prompt();\n  });\n});\n// Event notification\napp.on('quit', function(){\n  app.client.quit();\n});\n```\n\nCreating and Configuring a Shell\n--------------------------------\n\n```javascript\nvar app = shell();\napp.configure(function() {\n  app.use(shell.history({shell: app}));\n  app.use(shell.completer({shell: app}));\n  app.use(shell.help({shell: app, introduction: true}));\n});\napp.configure('prod', function() {\n  app.set('title', 'Production Mode');\n});\n```\n\nShell settings\n--------------\n\nThe constructor `shell` takes an optional object. Options are:\n\n-   `chdir`      , Changes the current working directory of the process, a string of the directory, boolean true will default to the `workspace` (in which case `workspace` must be provided or discoverable)\n-   `prompt`     , Character for command prompt, Defaults to \">>\"\n-   `stdin`      , Source to read from\n-   `stdout`     , Destination to write to\n-   `env`        , Running environment, Defaults to the `env` setting (or `NODE_ENV` if defined, eg: `production`, `develepment`).\n-   `isShell`    , Detect whether the command is runned inside a shell are as a single command.\n-   `noPrompt`   , Do not prompt the user for a command, usefull to plug your own starting mechanisme (eg: starting with a question).\n-   `workspace`  , Project root directory or null if none was found. The discovery strategy start from the current working directory and traverse each parent dir looking for a `node_module` directory or a `package.json` file.\n\nShell settings may be set by calling `app.set('key', value)`.  They can be retrieved by calling the same function without a second argument.\n\n```javascript\nvar app = new shell({\n  chdir: true\n});\napp.set('env', 'prod');\napp.configure('prod', function() {\n  console.log(app.set('env'));\n});\n```\n\nAs with Express, `app.configure` allows the customization of plugins for all or specific environments, while `app.use` registers plugins.\n\nIf `app.configure` is called without specifying the environment as the first argument, the provided callback is always called. Otherwise, the environment must match the `env` setting or the global variable `NODE_ENV`.\n\nMiddlewares and plugins\n-----------------------\n\nShell is build on a middleware architecture. When a command is issued, multiple callbacks are executed sequentially until one decide to stop the process  (calling `res.prompt()` or `shell.quit`. Those callbacks are called middlewares. A callback recieve 3 arguments: a `request` object, a `response` object and the next callback. Traditionnaly, `request` deals with `stdin` while `response` deals with `stdout`.\n\nA plugin is simply a function which configure and return a middleware. Same plugin also enrich the Shell application with new routes and functions.\n\nShell events\n------------\n\nThe following events may be emitted:\n\n-   `\"command\"`  , listen to all executed commands, provide the command name as first argument.\n-   `#{command}` , listen to a particular event.\n-   `\"quit\"`     , called when the application is about to quit.\n-   `\"error\"`    , called on error providing the error object as the first callback argument.\n-   `\"exit\"`     , called when the process exit.\n\nRequest parameter\n-----------------\n\nThe request object contains the following properties:\n\n-   `shell`   , (required) A reference to your shell application.\n-   `command` , Command entered by the user\n-   `params`  , Parameters object extracted from the command, defined by the `shell.router` middleware\n-   `qestion` , Ask questions with optionally suggested and default answers\n-   `confirm` , Ask a question expecting a boolean answer\n\nResponse parameter\n------------------\n\nThe response object inherits from styles containing methods for printing, coloring and bolding:\n\nColors:\n\n-   `black`\n-   `white`\n-   `yellow`\n-   `blue`\n-   `cyan`\n-   `green`\n-   `magenta`\n-   `red`\n-   `bgcolor`\n-   `color`\n-   `nocolor`\n\nStyle:\n\n-   `regular`\n-   `weight`\n-   `bold`\n\nDisplay:\n\n\n-   `prompt`     , Exits the current command and return user to the prompt.\n-   `ln`         , Print a new line\n-   `print`      , Print a text\n-   `println`    , Print a text followed by a new line\n-   `reset`      , Stop any formating like color or bold\n-   `pad`        , Print a text with a fixed padding\n-   `raw`        , Return a text\n\nRouter plugin\n-------------\n\nThe functionality provided by the 'routes' module is very similar to that of\nexpress.  Options passed during creation are:\n\n-   `shell`     , (required) A reference to your shell application.\n-   `sensitive` , (optional) Defaults to `false`, set to `true` if the match should be case sensitive.\n\nNew routes are defined with the `cmd` method. A route is made of pattern against which the user command is matched, an optional description and one or more route specific middlewares to handle the command. The pattern is either a string or a regular expression. Middlewares receive three parameters: a request object, a response object, and a function. Command parameters are substituted and made available in the `params` object of the request parameter.\n\nParameters can have restrictions in parenthesis immediately following the\nkeyword, as in express: `:id([0-9]+)`.  See the `list` route in the example:\n\n```javascript\nvar app = new shell();\napp.configure(function(){\n  app.use(shell.router({\n    shell: app\n  }));\n});\n\n// Route middleware\nvar auth = function(req, res, next){\n  if(req.params.uid == process.getuid()){\n    next()\n  }else{\n    throw new Error('Not me');\n  }\n}\n\n// Global parameter substitution\napp.param('uid', function(req, res, next){\n  exec('whoami', function(err, stdout, sdterr){\n    req.params.username = stdout;\n    next();\n  });\n});\n\n// Simple command\napp.cmd('help', function(req, res){\n  res.cyan('Run this command `./ami user ' + process.getuid() + '`');\n  res.prompt()\n});\n\n// Command with parameter\napp.cmd('user :uid', auth, function(req, res){\n  res.cyan('Yes, you are ' + req.params.username);\n});\n\n// Command with contrained parameter\napp.cmd('user :id([0-9]+)', function(req, res) {\n  res.cyan('User id is ' + req.params.id);\n  res.prompt();\n});\n```\n\nContributors\n------------\n\n*   David Worms : <https://github.com/wdavidw>\n*   Tony: <https://github.com/Zearin>\n*   Russ Frank : <https://github.com/russfrank>\n","_id":"shell@0.3.2","dist":{"shasum":"117eabe80750bf70e949142a70152d94cc063f1e","tarball":"https://registry.npmjs.org/shell/-/shell-0.3.2.tgz"},"maintainers":[{"name":"david","email":"david@adaltas.com"}],"directories":{}}},"maintainers":[{"name":"david","email":"david@adaltas.com"}],"time":{"modified":"2017-06-24T23:28:04.667Z","created":"2011-05-03T00:07:30.522Z","0.0.1":"2011-05-03T00:07:31.235Z","0.0.2":"2011-05-05T15:20:37.542Z","0.0.3":"2011-05-06T13:08:50.176Z","0.0.5":"2011-05-17T14:55:36.199Z","0.0.6":"2011-05-17T21:36:15.931Z","0.0.7":"2011-05-24T11:16:46.414Z","0.0.8":"2011-05-26T20:39:01.480Z","0.0.9":"2011-06-01T13:19:51.857Z","0.10.0":"2011-07-29T12:49:57.785Z","0.10.1":"2011-08-02T21:13:58.687Z","0.10.2":"2011-08-10T16:08:10.402Z","0.1.0":"2011-10-06T11:37:12.325Z","0.1.1":"2011-10-06T11:37:52.561Z","0.1.2":"2011-10-06T11:38:21.660Z","0.2.0":"2011-10-06T11:39:32.346Z","0.2.1":"2011-10-20T15:51:19.576Z","0.2.2":"2011-10-29T15:56:59.763Z","0.2.3":"2011-11-29T23:00:31.331Z","0.2.4":"2012-01-17T00:15:12.208Z","0.2.5":"2012-04-13T13:04:03.952Z","0.2.6":"2012-04-13T17:46:46.178Z","0.2.7":"2012-07-27T12:51:00.401Z","0.2.9":"2012-11-13T12:45:30.659Z","0.2.10":"2012-11-15T21:58:43.358Z","0.3.1":"2012-12-01T21:56:04.991Z","0.3.2":"2013-01-04T08:52:29.880Z"},"author":{"name":"David Worms","email":"david@adaltas.com"},"repository":{"type":"git","url":"https://github.com/wdavidw/node-shell.git"},"users":{"david":true,"fgribreau":true,"rifaqat":true,"exromany":true,"semencov":true,"hal9zillion":true,"pilsy":true,"thomas.miele":true,"insomniaqc":true,"prometheas":true,"solzimer":true},"_attachments":{},"_etag":"W/\"594ef584-17399\"","_lastModified":"Sat, 24 Jun 2017 23:28:04 GMT","_cached":true}