"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const osenv = require("osenv");
const path = require("path");
// tslint:disable-next-line
const isWindows = process.platform === 'win32' || global['FAKE_WINDOWS'];
const isFilespec = isWindows ? /^(?:[.]|~[/]|[/\\]|[a-zA-Z]:)/ : /^(?:[.]|~[/]|[/]|[a-zA-Z]:)/;
const isFilename = /[.](?:tgz|tar.gz|tar)$/i;
const isAbsolutePath = /^[/]|^[A-Za-z]:/;
function parsePref(pref, where) {
    if (pref.endsWith('.tgz')
        || pref.endsWith('.tar.gz')
        || pref.endsWith('.tar')
        || pref.includes(path.sep)
        || pref.startsWith('file:')
        || isFilespec.test(pref)) {
        return fromFile(pref, where);
    }
    return null;
}
exports.default = parsePref;
function fromFile(pref, where) {
    if (!where)
        where = process.cwd();
    const type = isFilename.test(pref) ? 'file' : 'directory';
    const spec = pref.replace(/\\/g, '/')
        .replace(/^file:[/]*([A-Za-z]:)/, '$1') // drive name paths on windows
        .replace(/^file:(?:[/]*([~./]))?/, '$1');
    if (/^~[/]/.test(spec)) {
        // this is needed for windows and for file:~/foo/bar
        return {
            fetchSpec: resolvePath(osenv.home(), spec.slice(2)),
            normalizedPref: `file:${spec}`,
            type,
        };
    }
    const fetchSpec = resolvePath(where, spec);
    if (isAbsolute(spec)) {
        return {
            fetchSpec,
            normalizedPref: `file:${spec}`,
            type,
        };
    }
    return {
        fetchSpec,
        normalizedPref: `file:${path.relative(where, fetchSpec)}`,
        type,
    };
}
function resolvePath(where, spec) {
    if (isAbsolutePath.test(spec))
        return spec;
    return path.resolve(where, spec);
}
function isAbsolute(dir) {
    if (dir[0] === '/')
        return true;
    if (/^[A-Za-z]:/.test(dir))
        return true;
    return false;
}
//# sourceMappingURL=parsePref.js.map