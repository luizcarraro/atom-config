"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("@pnpm/logger");
const dependency_path_1 = require("dependency-path");
const R = require("ramda");
const constants_1 = require("./constants");
function prune(shr, pkg) {
    const packages = {};
    const optionalDependencies = R.keys(pkg.optionalDependencies);
    const dependencies = R.difference(R.keys(pkg.dependencies), optionalDependencies);
    const devDependencies = R.difference(R.difference(R.keys(pkg.devDependencies), optionalDependencies), dependencies);
    const allDeps = R.reduce(R.union, [], [optionalDependencies, devDependencies, dependencies]);
    const specifiers = {};
    const shrDependencies = {};
    const shrOptionalDependencies = {};
    const shrDevDependencies = {};
    const nonOptional = new Set();
    const notProdOnly = new Set();
    R.keys(shr.specifiers).forEach((depName) => {
        if (allDeps.indexOf(depName) === -1)
            return;
        specifiers[depName] = shr.specifiers[depName];
        if (shr.dependencies && shr.dependencies[depName]) {
            shrDependencies[depName] = shr.dependencies[depName];
        }
        else if (shr.optionalDependencies && shr.optionalDependencies[depName]) {
            shrOptionalDependencies[depName] = shr.optionalDependencies[depName];
        }
        else if (shr.devDependencies && shr.devDependencies[depName]) {
            shrDevDependencies[depName] = shr.devDependencies[depName];
        }
    });
    const devDepRelativePaths = R.keys(shrDevDependencies)
        .map((pkgName) => dependency_path_1.refToRelative(shrDevDependencies[pkgName], pkgName));
    copyDependencySubTree(packages, devDepRelativePaths, shr, new Set(), { registry: shr.registry, nonOptional, notProdOnly, dev: true });
    const depRelativePaths = R.keys(shrDependencies)
        .map((pkgName) => dependency_path_1.refToRelative(shrDependencies[pkgName], pkgName));
    copyDependencySubTree(packages, depRelativePaths, shr, new Set(), {
        nonOptional,
        notProdOnly,
        registry: shr.registry,
    });
    if (shrOptionalDependencies) {
        const optionalDepRelativePaths = R.keys(shrOptionalDependencies)
            .map((pkgName) => dependency_path_1.refToRelative(shrOptionalDependencies[pkgName], pkgName));
        copyDependencySubTree(packages, optionalDepRelativePaths, shr, new Set(), { registry: shr.registry, nonOptional, notProdOnly, optional: true });
    }
    copyDependencySubTree(packages, devDepRelativePaths, shr, new Set(), {
        dev: true,
        nonOptional,
        notProdOnly,
        registry: shr.registry,
        walkOptionals: true,
    });
    copyDependencySubTree(packages, depRelativePaths, shr, new Set(), {
        nonOptional,
        notProdOnly,
        registry: shr.registry,
        walkOptionals: true,
    });
    const result = {
        registry: shr.registry,
        shrinkwrapVersion: constants_1.SHRINKWRAP_VERSION,
        specifiers,
    };
    if (typeof shr.shrinkwrapMinorVersion === 'number') {
        result.shrinkwrapMinorVersion = shr.shrinkwrapMinorVersion;
    }
    if (!R.isEmpty(packages)) {
        result.packages = packages;
    }
    if (!R.isEmpty(shrDependencies)) {
        result.dependencies = shrDependencies;
    }
    if (!R.isEmpty(shrOptionalDependencies)) {
        result.optionalDependencies = shrOptionalDependencies;
    }
    if (!R.isEmpty(shrDevDependencies)) {
        result.devDependencies = shrDevDependencies;
    }
    return result;
}
exports.default = prune;
function copyDependencySubTree(resolvedPackages, depRelativePaths, shr, walked, opts) {
    for (const depRalativePath of depRelativePaths) {
        if (walked.has(depRalativePath))
            continue;
        walked.add(depRalativePath);
        if (!shr.packages || !shr.packages[depRalativePath]) {
            // local dependencies don't need to be resolved in shrinkwrap.yaml
            // except local tarball dependencies
            if (depRalativePath.startsWith('file:') && !depRalativePath.endsWith('.tar.gz'))
                continue;
            logger_1.default.warn(`Cannot find resolution of ${depRalativePath} in shrinkwrap file`);
            continue;
        }
        const depShr = shr.packages[depRalativePath];
        resolvedPackages[depRalativePath] = depShr;
        if (opts.optional && !opts.nonOptional.has(depRalativePath)) {
            depShr.optional = true;
        }
        else {
            opts.nonOptional.add(depRalativePath);
            delete depShr.optional;
        }
        if (opts.dev) {
            opts.notProdOnly.add(depRalativePath);
            depShr.dev = true;
        }
        else if (depShr.dev === true) {
            delete depShr.dev;
        }
        else if (depShr.dev === undefined && !opts.notProdOnly.has(depRalativePath)) {
            depShr.dev = false;
        }
        const newDependencies = R.keys(depShr.dependencies)
            .map((pkgName) => dependency_path_1.refToRelative((depShr.dependencies && depShr.dependencies[pkgName]), pkgName));
        copyDependencySubTree(resolvedPackages, newDependencies, shr, walked, opts);
        if (!opts.walkOptionals)
            continue;
        const newOptionalDependencies = R.keys(depShr.optionalDependencies)
            .map((pkgName) => dependency_path_1.refToRelative((depShr.optionalDependencies && depShr.optionalDependencies[pkgName]), pkgName));
        copyDependencySubTree(resolvedPackages, newOptionalDependencies, shr, walked, Object.assign({}, opts, { optional: true }));
    }
}
//# sourceMappingURL=prune.js.map