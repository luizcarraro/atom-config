"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const logger_1 = require("@pnpm/logger");
const modulesController_1 = require("../fs/modulesController");
const normalizeRegistryUrl = require("normalize-registry-url");
const defaults = (opts) => __awaiter(this, void 0, void 0, function* () {
    const prefix = opts.prefix || process.cwd();
    return {
        shamefullyFlatten: false,
        storeController: opts.storeController,
        global: false,
        store: opts.store,
        bin: path.join(prefix, 'node_modules', '.bin'),
        prefix,
        force: false,
        registry: 'https://registry.npmjs.org/',
        independentLeaves: false,
        production: true,
        development: true,
        optional: true,
        shrinkwrap: true,
    };
});
exports.default = (opts) => __awaiter(this, void 0, void 0, function* () {
    if (opts) {
        for (const key in opts) {
            if (opts[key] === undefined) {
                delete opts[key];
            }
        }
    }
    const defaultOpts = yield defaults(opts);
    const extendedOpts = Object.assign({}, defaultOpts, opts, { store: defaultOpts.store });
    if (extendedOpts.force) {
        logger_1.default.warn('using --force I sure hope you know what you are doing');
    }
    extendedOpts.registry = normalizeRegistryUrl(extendedOpts.registry);
    if (extendedOpts.global) {
        const subfolder = modulesController_1.LAYOUT_VERSION.toString() + (extendedOpts.independentLeaves ? '_independent_leaves' : '');
        extendedOpts.prefix = path.join(extendedOpts.prefix, subfolder);
    }
    return extendedOpts;
});
//# sourceMappingURL=extendPruneOptions.js.map