"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const encodeRegistry = require("encode-registry");
const semver = require("semver");
function isAbsolute(dependencyPath) {
    return dependencyPath[0] !== '/';
}
exports.isAbsolute = isAbsolute;
function resolve(registryUrl, resolutionLocation) {
    if (!isAbsolute(resolutionLocation)) {
        const registryDirectory = encodeRegistry(registryUrl);
        return `${registryDirectory}${resolutionLocation}`;
    }
    return resolutionLocation;
}
exports.resolve = resolve;
function refToAbsolute(reference, pkgName, registry) {
    if (reference.indexOf('/') === -1) {
        const registryName = encodeRegistry(registry);
        return `${registryName}/${pkgName}/${reference}`;
    }
    return reference;
}
exports.refToAbsolute = refToAbsolute;
function relative(standardRegistry, absoluteResolutionLoc) {
    const registryName = encodeRegistry(standardRegistry);
    if (absoluteResolutionLoc.startsWith(`${registryName}/`)) {
        return absoluteResolutionLoc.substr(absoluteResolutionLoc.indexOf('/'));
    }
    return absoluteResolutionLoc;
}
exports.relative = relative;
function refToRelative(reference, pkgName) {
    if (reference.indexOf('/') === -1) {
        return `/${pkgName}/${reference}`;
    }
    return reference;
}
exports.refToRelative = refToRelative;
function parse(dependencyPath) {
    if (typeof dependencyPath !== 'string') {
        throw new TypeError(`Expected \`dependencyPath\` to be of type \`string\`, got \`${typeof dependencyPath}\``);
    }
    const _isAbsolute = isAbsolute(dependencyPath);
    const parts = dependencyPath.split('/');
    if (!_isAbsolute)
        parts.shift();
    const host = _isAbsolute ? parts.shift() : undefined;
    const name = parts[0].startsWith('@')
        ? `${parts.shift()}/${parts.shift()}`
        : parts.shift();
    const version = parts.shift();
    if (version && semver.valid(version)) {
        return {
            isAbsolute: _isAbsolute,
            name,
            version,
            host,
        };
    }
    if (!_isAbsolute)
        throw new Error(`${dependencyPath} is an invalid relative dependency path`);
    return {
        isAbsolute: _isAbsolute,
        host,
    };
}
exports.parse = parse;
//# sourceMappingURL=index.js.map