"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const most = require("most");
const R = require("ramda");
exports.propertyByDependencyType = {
    dev: 'devDependencies',
    optional: 'optionalDependencies',
    prod: 'dependencies',
};
function default_1(log$) {
    const deprecationSet$ = log$.deprecation
        .scan((acc, log) => {
        acc.add(log.pkgId);
        return acc;
    }, new Set());
    const pkgsDiff$ = most.combine((rootLog, deprecationSet) => [rootLog, deprecationSet], log$.root, deprecationSet$)
        .scan((pkgsDiff, args) => {
        const rootLog = args[0];
        const deprecationSet = args[1];
        if (rootLog['added']) {
            pkgsDiff[rootLog['added'].dependencyType][`+${rootLog['added'].name}`] = {
                added: true,
                deprecated: deprecationSet.has(rootLog['added'].id),
                latest: rootLog['added'].latest,
                name: rootLog['added'].name,
                realName: rootLog['added'].realName,
                version: rootLog['added'].version,
            };
            return pkgsDiff;
        }
        if (rootLog['removed']) {
            pkgsDiff[rootLog['removed'].dependencyType][`-${rootLog['removed'].name}`] = {
                added: false,
                name: rootLog['removed'].name,
                version: rootLog['removed'].version,
            };
            return pkgsDiff;
        }
        if (rootLog['linked']) {
            pkgsDiff[rootLog['linked'].dependencyType][`>${rootLog['linked'].name}`] = {
                added: false,
                from: rootLog['linked'].from,
                linked: true,
                name: rootLog['linked'].name,
            };
            return pkgsDiff;
        }
        return pkgsDiff;
    }, {
        dev: {},
        optional: {},
        prod: {},
    });
    const packageJson$ = most.fromPromise(log$.packageJson.take(2).reduce(R.merge, {}));
    return most.combine((pkgsDiff, packageJsons) => {
        const initialPackageJson = packageJsons['initial'];
        const updatedPackageJson = packageJsons['updated'];
        if (!initialPackageJson || !updatedPackageJson)
            return pkgsDiff;
        for (const depType of ['prod', 'optional', 'dev']) {
            const prop = exports.propertyByDependencyType[depType];
            const initialDeps = R.keys(initialPackageJson[prop]);
            const updatedDeps = R.keys(updatedPackageJson[prop]);
            const removedDeps = R.difference(initialDeps, updatedDeps);
            for (const removedDep of removedDeps) {
                if (!pkgsDiff[depType][`-${removedDep}`]) {
                    pkgsDiff[depType][`-${removedDep}`] = {
                        added: false,
                        name: removedDep,
                        version: initialPackageJson[prop][removedDep],
                    };
                }
            }
            const addedDeps = R.difference(updatedDeps, initialDeps);
            for (const addedDep of addedDeps) {
                if (!pkgsDiff[depType][`+${addedDep}`]) {
                    pkgsDiff[depType][`+${addedDep}`] = {
                        added: true,
                        name: addedDep,
                        version: updatedPackageJson[prop][addedDep],
                    };
                }
            }
        }
        return pkgsDiff;
    }, pkgsDiff$, packageJson$);
}
exports.default = default_1;
//# sourceMappingURL=pkgsDiff.js.map