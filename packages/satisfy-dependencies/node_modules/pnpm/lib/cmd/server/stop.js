"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("@pnpm/logger");
const server_1 = require("@pnpm/server");
const store_path_1 = require("@pnpm/store-path");
const delay = require("delay");
const loadJsonFile = require("load-json-file");
const path = require("path");
const processExists = require("process-exists");
const killcb = require("tree-kill");
const promisify = require("util.promisify");
const kill = promisify(killcb);
exports.default = (opts) => __awaiter(this, void 0, void 0, function* () {
    const store = yield store_path_1.default(opts.prefix, opts.store);
    let serverJson; // tslint:disable-line
    try {
        serverJson = yield loadJsonFile(path.join(store, 'server.json'));
    }
    catch (err) {
        if (err.code !== 'ENOENT') {
            throw err;
        }
        else {
            logger_1.default.info(`Nothing to stop. No server is running for the store at ${store}`);
            return;
        }
    }
    const storeController = yield server_1.connectStoreController(serverJson.connectionOptions);
    yield storeController.stop();
    if (!(yield processExists(serverJson.pid)) || (yield delay(5000)) && !(yield processExists(serverJson.pid))) {
        logger_1.default.info('Server gracefully stopped');
        return;
    }
    logger_1.default.warn('Graceful shutdown failed');
    yield kill(serverJson.pid, 'SIGINT');
    logger_1.default.info('Server process terminated');
});
//# sourceMappingURL=stop.js.map