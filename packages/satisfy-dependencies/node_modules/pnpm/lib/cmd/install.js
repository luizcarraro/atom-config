"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const supi_1 = require("supi");
const createStoreController_1 = require("../createStoreController");
const requireHooks_1 = require("../requireHooks");
/**
 * Perform installation.
 * @example
 *     installCmd([ 'lodash', 'foo' ], { silent: true })
 */
function installCmd(input, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        // `pnpm install ""` is going to be just `pnpm install`
        input = input.filter(Boolean);
        const prefix = opts.prefix || process.cwd();
        if (!opts.ignorePnpmfile) {
            opts.hooks = requireHooks_1.default(prefix);
        }
        const store = yield createStoreController_1.default(opts);
        const installOpts = Object.assign(opts, {
            store: store.path,
            storeController: store.ctrl,
        });
        if (!input || !input.length) {
            return supi_1.install(installOpts);
        }
        return supi_1.installPkgs(input, installOpts);
    });
}
exports.default = installCmd;
//# sourceMappingURL=install.js.map