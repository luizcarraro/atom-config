(function() {
  var MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES, PackageUpdater, Util, WARMUP_WAIT, meta;

  meta = require("../package.json");

  Util = require("./util");

  PackageUpdater = null;

  WARMUP_WAIT = 10 * 1000;

  MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES = 15;

  module.exports = {
    config: {
      includedPackages: {
        title: "Included Packages",
        description: "Comma-delimited list of packages to be included from automatic updates",
        type: "array",
        "default": [],
        order: 1
      },
      excludedPackages: {
        title: "Excluded Packages",
        description: "Comma-delimited list of packages to be excluded from automatic updates",
        type: "array",
        "default": [],
        order: 2
      },
      intervalMinutes: {
        title: "Update Interval",
        description: "Set the default update interval in minutes",
        type: "integer",
        minimum: MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES,
        "default": 6 * 60,
        order: 3
      },
      updateNotification: {
        title: "Notify on Update",
        description: "Enable to show notifications when packages have been updated",
        type: "boolean",
        "default": true,
        order: 4
      },
      dismissNotification: {
        title: "Dismiss Notification",
        description: "Automatically dismiss the update notification after 5 seconds",
        type: "boolean",
        "default": true,
        order: 5
      },
      notificationStyle: {
        title: "Notification Style",
        description: "Specify a style for the notification popup (*Success=green*, *Info=blue*, *Warning=yellow*, and *Error=red*)",
        type: "string",
        "enum": ["Success", "Info", "Warning", "Error"],
        "default": "Success",
        order: 6
      },
      maximumPackageDetail: {
        title: "Maximum Package Detail",
        description: "Specify the maximum number of package names displayed in the notification (minimum is 3)",
        type: "number",
        "default": 5,
        minimum: 3,
        order: 7
      },
      debugMode: {
        title: "Debug Mode",
        description: "Enable to output details in your console",
        type: "boolean",
        "default": false,
        order: 8
      }
    },
    activate: function(state) {
      var commands;
      commands = {};
      commands[meta.name + ":update-now"] = (function(_this) {
        return function() {
          return _this.updatePackages(false);
        };
      })(this);
      this.commandSubscription = atom.commands.add("atom-workspace", commands);
      return setTimeout((function(_this) {
        return function() {
          return _this.enableAutoUpdate();
        };
      })(this), WARMUP_WAIT);
    },
    deactivate: function() {
      var ref;
      this.disableAutoUpdate();
      if ((ref = this.commandSubscription) != null) {
        ref.dispose();
      }
      return this.commandSubscription = null;
    },
    enableAutoUpdate: function() {
      this.updatePackagesIfAutoUpdateBlockIsExpired();
      this.autoUpdateCheck = setInterval((function(_this) {
        return function() {
          return _this.updatePackagesIfAutoUpdateBlockIsExpired();
        };
      })(this), this.getAutoUpdateCheckInterval());
      return this.configSubscription = atom.config.onDidChange(meta.name + ".intervalMinutes", (function(_this) {
        return function(arg) {
          var newValue, oldValue;
          newValue = arg.newValue, oldValue = arg.oldValue;
          if (Util.getConfig("debugMode")) {
            console.log("Changed update interval to " + newValue);
          }
          _this.disableAutoUpdate();
          return _this.enableAutoUpdate();
        };
      })(this));
    },
    disableAutoUpdate: function() {
      var ref;
      if ((ref = this.configSubscription) != null) {
        ref.dispose();
      }
      this.configSubscription = null;
      if (this.autoUpdateCheck) {
        clearInterval(this.autoUpdateCheck);
      }
      return this.autoUpdateCheck = null;
    },
    updatePackagesIfAutoUpdateBlockIsExpired: function() {
      var lastUpdateTime;
      lastUpdateTime = this.loadLastUpdateTime() || 0;
      if (Date.now() > lastUpdateTime + this.getAutoUpdateBlockDuration()) {
        return this.updatePackages();
      }
    },
    updatePackages: function(isAutoUpdate) {
      if (isAutoUpdate == null) {
        isAutoUpdate = true;
      }
      if (PackageUpdater == null) {
        PackageUpdater = require("./package-updater");
      }
      PackageUpdater.updatePackages(isAutoUpdate);
      return this.saveLastUpdateTime();
    },
    getAutoUpdateBlockDuration: function() {
      var minutes;
      minutes = atom.config.get(meta.name + ".intervalMinutes");
      if (isNaN(minutes) || minutes < MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES) {
        minutes = MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES;
      }
      return minutes * 60 * 1000;
    },
    getAutoUpdateCheckInterval: function() {
      return this.getAutoUpdateBlockDuration() / 15;
    },
    loadLastUpdateTime: function() {
      var lastUpdateTime;
      try {
        lastUpdateTime = localStorage.getItem(meta.name + ".lastUpdateTime");
        return parseInt(lastUpdateTime);
      } catch (error) {
        localStorage.setItem(meta.name + ".lastUpdateTime", Date.now());
        return null;
      }
    },
    saveLastUpdateTime: function() {
      return localStorage.setItem(meta.name + ".lastUpdateTime", Date.now().toString());
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
