(function() {
  module.exports = {
    config: {
      keepCursorInView: {
        type: 'boolean',
        "default": true,
        description: 'Keep the cursor a few lines wihin the screen',
        order: 1
      },
      bigScrollSize: {
        type: 'integer',
        "default": 10,
        minimum: 1,
        maximum: 1000,
        description: 'Number of lines to move on a "big" scroll',
        order: 2
      }
    },
    activate: function(state) {
      atom.commands.add('atom-workspace', "ctrl-dir-scroll:scroll-up", (function(_this) {
        return function() {
          return _this.scrollUp(1);
        };
      })(this));
      atom.commands.add('atom-workspace', "ctrl-dir-scroll:scroll-up-big", (function(_this) {
        return function() {
          return _this.scrollUp(atom.config.get('ctrl-dir-scroll.bigScrollSize'));
        };
      })(this));
      atom.commands.add('atom-workspace', "ctrl-dir-scroll:scroll-down", (function(_this) {
        return function() {
          return _this.scrollDown(1);
        };
      })(this));
      return atom.commands.add('atom-workspace', "ctrl-dir-scroll:scroll-down-big", (function(_this) {
        return function() {
          return _this.scrollDown(atom.config.get('ctrl-dir-scroll.bigScrollSize'));
        };
      })(this));
    },
    scrollUp: function(amount) {
      var calculatedLastRow, cursorOffset, editor, editorElement, keepCursorInView;
      editor = atom.workspace.getActiveTextEditor();
      editorElement = atom.views.getView(editor);
      if (editor && editor.getScreenLineCount() > 1 && (editor.getScreenLineCount() > editor.rowsPerPage || editor.scrollPastEnd)) {
        keepCursorInView = atom.config.get('ctrl-dir-scroll.keepCursorInView');
        calculatedLastRow = Math.ceil(editorElement.getScrollBottom() / editor.getLineHeightInPixels()) - Math.min(amount, editor.getVisibleRowRange()[0]);
        cursorOffset = editor.getCursorScreenPosition().row - calculatedLastRow + 2;
        if (keepCursorInView && (cursorOffset >= 0)) {
          editor.moveUp(cursorOffset + 1);
        }
        return editorElement.setScrollTop(editorElement.getScrollTop() - editor.getLineHeightInPixels() * amount);
      }
    },
    scrollDown: function(amount) {
      var cursorOffset, editor, editorElement, keepCursorInView;
      editor = atom.workspace.getActiveTextEditor();
      editorElement = atom.views.getView(editor);
      if (editor && editor.getScreenLineCount() > 1 && (editor.getScreenLineCount() > editor.rowsPerPage || editor.scrollPastEnd)) {
        keepCursorInView = atom.config.get('ctrl-dir-scroll.keepCursorInView');
        cursorOffset = editor.getCursorScreenPosition().row - editor.getVisibleRowRange()[0] - 2;
        if (keepCursorInView && (cursorOffset <= amount)) {
          editor.moveDown(amount - cursorOffset);
        }
        return editorElement.setScrollTop(editorElement.getScrollTop() + editor.getLineHeightInPixels() * amount);
      }
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvbHVpei5jYXJyYXJvLy5hdG9tL3BhY2thZ2VzL2N0cmwtZGlyLXNjcm9sbC9saWIvY3RybC1kaXItc2Nyb2xsLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7SUFBQSxNQUFBLEVBQ0U7TUFBQSxnQkFBQSxFQUNFO1FBQUEsSUFBQSxFQUFNLFNBQU47UUFDQSxDQUFBLE9BQUEsQ0FBQSxFQUFTLElBRFQ7UUFFQSxXQUFBLEVBQWEsOENBRmI7UUFHQSxLQUFBLEVBQU8sQ0FIUDtPQURGO01BS0EsYUFBQSxFQUNFO1FBQUEsSUFBQSxFQUFNLFNBQU47UUFDQSxDQUFBLE9BQUEsQ0FBQSxFQUFTLEVBRFQ7UUFFQSxPQUFBLEVBQVMsQ0FGVDtRQUdBLE9BQUEsRUFBUyxJQUhUO1FBSUEsV0FBQSxFQUFhLDJDQUpiO1FBS0EsS0FBQSxFQUFPLENBTFA7T0FORjtLQURGO0lBY0EsUUFBQSxFQUFVLFNBQUMsS0FBRDtNQUNSLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBZCxDQUFrQixnQkFBbEIsRUFBb0MsMkJBQXBDLEVBQWlFLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQTtpQkFDL0QsS0FBQyxDQUFBLFFBQUQsQ0FBVSxDQUFWO1FBRCtEO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFqRTtNQUVBLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBZCxDQUFrQixnQkFBbEIsRUFBb0MsK0JBQXBDLEVBQXFFLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQTtpQkFDbkUsS0FBQyxDQUFBLFFBQUQsQ0FBVSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQVosQ0FBZ0IsK0JBQWhCLENBQVY7UUFEbUU7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXJFO01BRUEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFkLENBQWtCLGdCQUFsQixFQUFvQyw2QkFBcEMsRUFB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biAgY29uZmlnOlxuICAgIGtlZXBDdXJzb3JJblZpZXc6XG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICAgIGRlc2NyaXB0aW9uOiAnS2VlcCB0aGUgY3Vyc29yIGEgZmV3IGxpbmVzIHdpaGluIHRoZSBzY3JlZW4nXG4gICAgICBvcmRlcjogMVxuICAgIGJpZ1Njcm9sbFNpemU6XG4gICAgICB0eXBlOiAnaW50ZWdlcidcbiAgICAgIGRlZmF1bHQ6IDEwXG4gICAgICBtaW5pbXVtOiAxXG4gICAgICBtYXhpbXVtOiAxMDAwXG4gICAgICBkZXNjcmlwdGlvbjogJ051bWJlciBvZiBsaW5lcyB0byBtb3ZlIG9uIGEgXCJiaWdcIiBzY3JvbGwnXG4gICAgICBvcmRlcjogMlxuXG4gIGFjdGl2YXRlOiAoc3RhdGUpIC0+XG4gICAgYXRvbS5jb21tYW5kcy5hZGQgJ2F0b20td29ya3NwYWNlJywgXCJjdHJsLWRpci1zY3JvbGw6c2Nyb2xsLXVwXCIsID0+XG4gICAgICBAc2Nyb2xsVXAoMSlcbiAgICBhdG9tLmNvbW1hbmRzLmFkZCAnYXRvbS13b3Jrc3BhY2UnLCBcImN0cmwtZGlyLXNjcm9sbDpzY3JvbGwtdXAtYmlnXCIsID0+XG4gICAgICBAc2Nyb2xsVXAoYXRvbS5jb25maWcuZ2V0ICdjdHJsLWRpci1zY3JvbGwuYmlnU2Nyb2xsU2l6ZScpXG4gICAgYXRvbS5jb21tYW5kcy5hZGQgJ2F0b20td29ya3NwYWNlJywgXCJjdHJsLWRpci1zY3JvbGw6c2Nyb2xsLWRvd25cIiwgPT5cbiAgICAgIEBzY3JvbGxEb3duKDEpXG4gICAgYXRvbS5jb21tYW5kcy5hZGQgJ2F0b20td29ya3NwYWNlJywgXCJjdHJsLWRpci1zY3JvbGw6c2Nyb2xsLWRvd24tYmlnXCIsID0+XG4gICAgICBAc2Nyb2xsRG93bihhdG9tLmNvbmZpZy5nZXQgJ2N0cmwtZGlyLXNjcm9sbC5iaWdTY3JvbGxTaXplJylcblxuICBzY3JvbGxVcDogKGFtb3VudCkgLT5cbiAgICBlZGl0b3IgPSBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVUZXh0RWRpdG9yKClcbiAgICBlZGl0b3JFbGVtZW50ID0gYXRvbS52aWV3cy5nZXRWaWV3KGVkaXRvcilcbiAgICBpZiAoZWRpdG9yICYmIGVkaXRvci5nZXRTY3JlZW5MaW5lQ291bnQoKSA+IDEgJiYgKGVkaXRvci5nZXRTY3JlZW5MaW5lQ291bnQoKSA+IGVkaXRvci5yb3dzUGVyUGFnZSB8fCBlZGl0b3Iuc2Nyb2xsUGFzdEVuZCkpXG4gICAgICBrZWVwQ3Vyc29ySW5WaWV3ID0gYXRvbS5jb25maWcuZ2V0ICdjdHJsLWRpci1zY3JvbGwua2VlcEN1cnNvckluVmlldydcblxuICAgICAgIyBlZGl0b3IuZ2V0VmlzaWJsZVJvd1JhbmdlKClbMF0gaWdub3JlcyB0aGUgYmxhbmsgbGluZSBvbiB0aGUgZW5kIHdoaWNoIGNhdXNlcyBjdXJzb3IgY29ycmVjdGlvbiB0byBiZWhhdmUgaW4gYW5cbiAgICAgICMgdW5kZXNpcmFibGUgbWFubmVyLlxuICAgICAgY2FsY3VsYXRlZExhc3RSb3cgPSBNYXRoLmNlaWwoZWRpdG9yRWxlbWVudC5nZXRTY3JvbGxCb3R0b20oKSAvIGVkaXRvci5nZXRMaW5lSGVpZ2h0SW5QaXhlbHMoKSkgLSBNYXRoLm1pbihhbW91bnQsIGVkaXRvci5nZXRWaXNpYmxlUm93UmFuZ2UoKVswXSlcbiAgICAgICMgQ2hlY2sgaWYgdGhlIGN1cnNvciB3aWxsIGJlIGJleW9uZCB0aGUgZW5kIG9mIHRoZSBwYWdlLiBJZiBpdCB3aWxsIGJlIHRoZW4gbW92ZSBpdCB1cCB0aGUgcmVxdWlyZWQgbnVtYmVyIG9mIGxpbmVzIHRvIGtlZXAgaXQgb24gdGhlIHBhZ2VcbiAgICAgICMgVGhlIGRlZmF1bHQgYmVoYXZpb3VyIG9mIHRoZSBlZGl0b3IgaXMgdG8ga2VlcCB0aGUgY3Vyc29yIGEgY291cGxlIG9mIGxpbmVzIHdpdGhpbiB0aGUgc2NyZWVuLiBXZSBhcmUgcmVwbGljYXRpbmcgdGhhdC5cbiAgICAgIGN1cnNvck9mZnNldCA9IGVkaXRvci5nZXRDdXJzb3JTY3JlZW5Qb3NpdGlvbigpLnJvdyAtIGNhbGN1bGF0ZWRMYXN0Um93ICsgMlxuICAgICAgaWYga2VlcEN1cnNvckluVmlldyAmJiAoY3Vyc29yT2Zmc2V0ID49IDApXG4gICAgICAgIGVkaXRvci5tb3ZlVXAoY3Vyc29yT2Zmc2V0ICsgMSlcblxuICAgICAgIyBTY3JvbGwgdGhlIGVkaXRvciBieSBhbW91bnQgbGluZXMgd29ydGggb2YgcGl4ZWxzXG4gICAgICBlZGl0b3JFbGVtZW50LnNldFNjcm9sbFRvcChlZGl0b3JFbGVtZW50LmdldFNjcm9sbFRvcCgpIC0gZWRpdG9yLmdldExpbmVIZWlnaHRJblBpeGVscygpICogYW1vdW50KVxuXG4gIHNjcm9sbERvd246IChhbW91bnQpIC0+XG4gICAgZWRpdG9yID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpXG4gICAgZWRpdG9yRWxlbWVudCA9IGF0b20udmlld3MuZ2V0VmlldyhlZGl0b3IpXG4gICAgaWYgKGVkaXRvciAmJiBlZGl0b3IuZ2V0U2NyZWVuTGluZUNvdW50KCkgPiAxICYmIChlZGl0b3IuZ2V0U2NyZWVuTGluZUNvdW50KCkgPiBlZGl0b3Iucm93c1BlclBhZ2UgfHwgZWRpdG9yLnNjcm9sbFBhc3RFbmQpKVxuICAgICAga2VlcEN1cnNvckluVmlldyA9IGF0b20uY29uZmlnLmdldCAnY3RybC1kaXItc2Nyb2xsLmtlZXBDdXJzb3JJblZpZXcnXG4gICAgICAjIENoZWNrIGlmIHRoZSBjdXJzb3Igd2lsbCBiZSBiZXlvbmQgdGhlIGVuZCBvZiB0aGUgcGFnZS4gSWYgaXQgd2lsbCBiZSB0aGVuIG1vdmUgaXQgdXAgdGhlIHJlcXVpcmVkIG51bWJlciBvZiBsaW5lcyB0byBrZWVwIGl0IG9uIHRoZSBwYWdlXG4gICAgICAjIFRoZSBkZWZhdWx0IGJlaGF2aW91ciBvZiB0aGUgZWRpdG9yIGlzIHRvIGtlZXAgdGhlIGN1cnNvciBhIGNvdXBsZSBvZiBsaW5lcyB3aXRoaW4gdGhlIHNjcmVlbi4gV2UgYXJlIHJlcGxpY2F0aW5nIHRoYXQuXG4gICAgICBjdXJzb3JPZmZzZXQgPSBlZGl0b3IuZ2V0Q3Vyc29yU2NyZWVuUG9zaXRpb24oKS5yb3cgLSBlZGl0b3IuZ2V0VmlzaWJsZVJvd1JhbmdlKClbMF0gLSAyXG4gICAgICBpZiBrZWVwQ3Vyc29ySW5WaWV3ICYmIChjdXJzb3JPZmZzZXQgPD0gYW1vdW50KVxuICAgICAgICBlZGl0b3IubW92ZURvd24oYW1vdW50IC0gY3Vyc29yT2Zmc2V0KVxuXG4gICAgICAjIFNjcm9sbCB0aGUgZWRpdG9yIGJ5IGFtb3VudCBsaW5lcyB3b3J0aCBvZiBwaXhlbHNcbiAgICAgIGVkaXRvckVsZW1lbnQuc2V0U2Nyb2xsVG9wKGVkaXRvckVsZW1lbnQuZ2V0U2Nyb2xsVG9wKCkgKyBlZGl0b3IuZ2V0TGluZUhlaWdodEluUGl4ZWxzKCkgKiBhbW91bnQpXG4iXX0=
