(function() {
  var GoogleAnalytics, uuid;

  uuid = function() {
    var s4;
    s4 = function() {
      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    };
    return "" + (s4()) + (s4()) + "-" + (s4()) + "-" + (s4()) + "-" + (s4()) + "-" + (s4()) + (s4()) + (s4());
  };

  module.exports = GoogleAnalytics = {
    getCid: function(cb) {
      if (this.cid) {
        cb(this.cid);
        return;
      }
      require("getmac").getMac(function(error, macAddress) {
        if (error) {
          return cb(this.cid = uuid());
        } else {
          return cb(this.cid = require("crypto").createHash("sha1").update(macAddress, "utf8").digest("hex"));
        }
      });
    },
    sendEvent: function(category, action, label, value) {
      var params;
      params = {
        t: "event",
        ec: category,
        ea: action
      };
      if (label) {
        params.el = label;
      }
      if (value) {
        params.ev = value;
      }
      this.send(params);
    },
    send: function(params) {
      if (!atom.packages.getActivePackage("metrics")) {
        return;
      }
      this.getCid(function(cid) {
        Object.assign(params, {
          cid: cid
        }, GoogleAnalytics.defaultParams());
        GoogleAnalytics.request("https://www.google-analytics.com/collect?" + require("querystring").stringify(params));
      });
    },
    request: function(url) {
      if (!navigator.onLine) {
        return;
      }
      this.post(url);
    },
    post: function(url) {
      var xhr;
      xhr = new XMLHttpRequest;
      xhr.open("POST", url);
      xhr.send(null);
    },
    defaultParams: function() {
      return {
        v: 1,
        tid: "UA-53539506-9"
      };
    }
  };

  atom.packages.onDidActivatePackage(function(pkg) {
    var meta;
    if ("metrics" === pkg.name) {
      meta = atom.packages.getLoadedPackage("browse").metadata;
      require("./google-analytics").sendEvent("core", "activated", meta.version);
    }
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvbHVpei5jYXJyYXJvLy5hdG9tL3BhY2thZ2VzL2Jyb3dzZS9saWIvZ2EuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxJQUFBLEdBQU8sU0FBQTtBQUNMLFFBQUE7SUFBQSxFQUFBLEdBQUssU0FBQTthQUNILElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBQyxDQUFBLEdBQUksSUFBSSxDQUFDLE1BQUwsQ0FBQSxDQUFMLENBQUEsR0FBc0IsT0FBakMsQ0FBeUMsQ0FBQyxRQUExQyxDQUFtRCxFQUFuRCxDQUFzRCxDQUFDLFNBQXZELENBQWlFLENBQWpFO0lBREc7V0FHTCxFQUFBLEdBQUUsQ0FBQyxFQUFBLENBQUEsQ0FBRCxDQUFGLEdBQVMsQ0FBQyxFQUFBLENBQUEsQ0FBRCxDQUFULEdBQWUsR0FBZixHQUFpQixDQUFDLEVBQUEsQ0FBQSxDQUFELENBQWpCLEdBQXVCLEdBQXZCLEdBQXlCLENBQUMsRUFBQSxDQUFBLENBQUQsQ0FBekIsR0FBK0IsR0FBL0IsR0FBaUMsQ0FBQyxFQUFBLENBQUEsQ0FBRCxDQUFqQyxHQUF1QyxHQUF2QyxHQUF5QyxDQUFDLEVBQUEsQ0FBQSxDQUFELENBQXpDLEdBQWdELENBQUMsRUFBQSxDQUFBLENBQUQsQ0FBaEQsR0FBdUQsQ0FBQyxFQUFBLENBQUEsQ0FBRDtFQUpsRDs7RUFNUCxNQUFNLENBQUMsT0FBUCxHQUFpQixlQUFBLEdBRWY7SUFBQSxNQUFBLEVBQVEsU0FBQyxFQUFEO01BQ04sSUFBRyxJQUFDLENBQUEsR0FBSjtRQUNFLEVBQUEsQ0FBRyxJQUFDLENBQUEsR0FBSjtBQUNBLGVBRkY7O01BR0EsT0FBQSxDQUFRLFFBQVIsQ0FBaUIsQ0FBQyxNQUFsQixDQUF5QixTQUFDLEtBQUQsRUFBUSxVQUFSO1FBQ3ZCLElBQUcsS0FBSDtpQkFBYyxFQUFBLENBQUcsSUFBQyxDQUFBLEdBQUQsR0FBTyxJQUFBLENBQUEsQ0FBVixFQUFkO1NBQUEsTUFBQTtpQkFBcUMsRUFBQSxDQUFHLElBQUMsQ0FBQSxHQUFELEdBQU8sT0FBQSxDQUFRLFFBQVIsQ0FBaUIsQ0FBQyxVQUFsQixDQUE2QixNQUE3QixDQUFvQyxDQUFDLE1BQXJDLENBQTRDLFVBQTVDLEVBQXdELE1BQXhELENBQStELENBQUMsTUFBaEUsQ0FBdUUsS0FBdkUsQ0FBVixFQUFyQzs7TUFEdUIsQ0FBekI7SUFKTSxDQUFSO0lBUUEsU0FBQSxFQUFXLFNBQUMsUUFBRCxFQUFXLE1BQVgsRUFBbUIsS0FBbkIsRUFBMEIsS0FBMUI7QUFDVCxVQUFBO01BQUEsTUFBQSxHQUNFO1FBQUEsQ0FBQSxFQUFHLE9BQUg7UUFDQSxFQUFBLEVBQUksUUFESjtRQUVBLEVBQUEsRUFBSSxNQUZKOztNQUdGLElBQUcsS0FBSDtRQUNFLE1BQU0sQ0FBQyxFQUFQLEdBQVksTUFEZDs7TUFFQSxJQUFHLEtBQUg7UUFDRSxNQUFNLENBQUMsRUFBUCxHQUFZLE1BRGQ7O01BRUEsSUFBQyxDQUFBLElBQUQsQ0FBTSxNQUFOO0lBVFMsQ0FSWDtJQW9CQSxJQUFBLEVBQU0sU0FBQyxNQUFEO01BQ0osSUFBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWQsQ0FBK0IsU0FBL0IsQ0FBSjtBQUVFLGVBRkY7O01BR0EsSUFBQyxDQUFBLE1BQUQsQ0FBUSxTQUFDLEdBQUQ7UUFDTixNQUFNLENBQUMsTUFBUCxDQUFjLE1BQWQsRUFBc0I7VUFBRSxHQUFBLEVBQUssR0FBUDtTQUF0QixFQUFvQyxlQUFlLENBQUMsYUFBaEIsQ0FBQSxDQUFwQztRQUNBLGVBQWUsQ0FBQyxPQUFoQixDQUF3QiwyQ0FBQSxHQUE4QyxPQUFBLENBQVEsYUFBUixDQUFzQixDQUFDLFNBQXZCLENBQWlDLE1BQWpDLENBQXRFO01BRk0sQ0FBUjtJQUpJLENBcEJOO0lBOEJBLE9BQUEsRUFBUyxTQUFDLEdBQUQ7TUFDUCxJQUFHLENBQUMsU0FBUyxDQUFDLE1BQWQ7QUFDRSxlQURGOztNQUVBLElBQUMsQ0FBQSxJQUFELENBQU0sR0FBTjtJQUhPLENBOUJUO0lBb0NBLElBQUEsRUFBTSxTQUFDLEdBQUQ7QUFDSixVQUFBO01BQUEsR0FBQSxHQUFNLElBQUk7TUFDVixHQUFHLENBQUMsSUFBSixDQUFTLE1BQVQsRUFBaUIsR0FBakI7TUFDQSxHQUFHLENBQUMsSUFBSixDQUFTLElBQVQ7SUFISSxDQXBDTjtJQTBDQSxhQUFBLEVBQWUsU0FBQTthQUViO1FBQ0UsQ0FBQSxFQUFHLENBREw7UUFFRSxHQUFBLEVBQUssZUFGUDs7SUFGYSxDQTFDZjs7O0VBaURGLElBQUksQ0FBQyxRQUFRLENBQUMsb0JBQWQsQ0FBbUMsU0FBQyxHQUFEO0FBQ2pDLFFBQUE7SUFBQSxJQUFHLFNBQUEsS0FBYSxHQUFHLENBQUMsSUFBcEI7TUFDRSxJQUFBLEdBQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZCxDQUErQixRQUEvQixDQUF3QyxDQUFDO01BQ2hELE9BQUEsQ0FBUSxvQkFBUixDQUE2QixDQUFDLFNBQTlCLENBQXdDLE1BQXhDLEVBQWdELFdBQWhELEVBQTZELElBQUksQ0FBQyxPQUFsRSxFQUZGOztFQURpQyxDQUFuQztBQXpEQSIsInNvdXJjZXNDb250ZW50IjpbInV1aWQgPSAtPlxuICBzNCA9IC0+XG4gICAgTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMCkudG9TdHJpbmcoMTYpLnN1YnN0cmluZyAxXG5cbiAgXCIje3M0KCl9I3tzNCgpfS0je3M0KCl9LSN7czQoKX0tI3tzNCgpfS0je3M0KCl9I3tzNCgpfSN7czQoKX1cIlxuXG5tb2R1bGUuZXhwb3J0cyA9IEdvb2dsZUFuYWx5dGljcyA9XG5cbiAgZ2V0Q2lkOiAoY2IpIC0+XG4gICAgaWYgQGNpZFxuICAgICAgY2IgQGNpZFxuICAgICAgcmV0dXJuXG4gICAgcmVxdWlyZShcImdldG1hY1wiKS5nZXRNYWMgKGVycm9yLCBtYWNBZGRyZXNzKSAtPlxuICAgICAgaWYgZXJyb3IgdGhlbiBjYihAY2lkID0gdXVpZCgpKSBlbHNlIGNiKEBjaWQgPSByZXF1aXJlKFwiY3J5cHRvXCIpLmNyZWF0ZUhhc2goXCJzaGExXCIpLnVwZGF0ZShtYWNBZGRyZXNzLCBcInV0ZjhcIikuZGlnZXN0KFwiaGV4XCIpKVxuICAgIHJldHVyblxuXG4gIHNlbmRFdmVudDogKGNhdGVnb3J5LCBhY3Rpb24sIGxhYmVsLCB2YWx1ZSkgLT5cbiAgICBwYXJhbXMgPVxuICAgICAgdDogXCJldmVudFwiXG4gICAgICBlYzogY2F0ZWdvcnlcbiAgICAgIGVhOiBhY3Rpb25cbiAgICBpZiBsYWJlbFxuICAgICAgcGFyYW1zLmVsID0gbGFiZWxcbiAgICBpZiB2YWx1ZVxuICAgICAgcGFyYW1zLmV2ID0gdmFsdWVcbiAgICBAc2VuZCBwYXJhbXNcbiAgICByZXR1cm5cblxuICBzZW5kOiAocGFyYW1zKSAtPlxuICAgIGlmICFhdG9tLnBhY2thZ2VzLmdldEFjdGl2ZVBhY2thZ2UoXCJtZXRyaWNzXCIpXG4gICAgICAjIElmIHRoZSBtZXRyaWNzIHBhY2thZ2UgaXMgZGlzYWJsZWQsIHRoZW4gdXNlciBoYXMgb3B0ZWQgb3V0LlxuICAgICAgcmV0dXJuXG4gICAgQGdldENpZCAoY2lkKSAtPlxuICAgICAgT2JqZWN0LmFzc2lnbiBwYXJhbXMsIHsgY2lkOiBjaWQgfSwgR29vZ2xlQW5hbHl0aWNzLmRlZmF1bHRQYXJhbXMoKVxuICAgICAgR29vZ2xlQW5hbHl0aWNzLnJlcXVlc3QgXCJodHRwczovL3d3dy5nb29nbGUtYW5hbHl0aWNzLmNvbS9jb2xsZWN0P1wiICsgcmVxdWlyZShcInF1ZXJ5c3RyaW5nXCIpLnN0cmluZ2lmeShwYXJhbXMpXG4gICAgICByZXR1cm5cbiAgICByZXR1cm5cblxuICByZXF1ZXN0OiAodXJsKSAtPlxuICAgIGlmICFuYXZpZ2F0b3Iub25MaW5lXG4gICAgICByZXR1cm5cbiAgICBAcG9zdCB1cmxcbiAgICByZXR1cm5cblxuICBwb3N0OiAodXJsKSAtPlxuICAgIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdFxuICAgIHhoci5vcGVuIFwiUE9TVFwiLCB1cmxcbiAgICB4aHIuc2VuZCBudWxsXG4gICAgcmV0dXJuXG5cbiAgZGVmYXVsdFBhcmFtczogLT5cbiAgICAjIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2FuYWx5dGljcy9kZXZndWlkZXMvY29sbGVjdGlvbi9wcm90b2NvbC92MS9wYXJhbWV0ZXJzXG4gICAge1xuICAgICAgdjogMVxuICAgICAgdGlkOiBcIlVBLTUzNTM5NTA2LTlcIlxuICAgIH1cblxuYXRvbS5wYWNrYWdlcy5vbkRpZEFjdGl2YXRlUGFja2FnZSAocGtnKSAtPlxuICBpZiBcIm1ldHJpY3NcIiA9PSBwa2cubmFtZVxuICAgIG1ldGEgPSBhdG9tLnBhY2thZ2VzLmdldExvYWRlZFBhY2thZ2UoXCJicm93c2VcIikubWV0YWRhdGFcbiAgICByZXF1aXJlKFwiLi9nb29nbGUtYW5hbHl0aWNzXCIpLnNlbmRFdmVudCBcImNvcmVcIiwgXCJhY3RpdmF0ZWRcIiwgbWV0YS52ZXJzaW9uXG4gIHJldHVybiJdfQ==
