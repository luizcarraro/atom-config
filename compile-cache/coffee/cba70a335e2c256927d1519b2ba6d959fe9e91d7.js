(function() {
  var wrapSelection;

  module.exports = {
    activate: function(state) {
      return atom.commands.add('atom-workspace', {
        'wrap-in-tag:wrap': (function(_this) {
          return function() {
            return _this.wrap();
          };
        })(this)
      });
    },
    wrap: function() {
      var editor;
      if (editor = atom.workspace.getActiveTextEditor()) {
        return editor.getSelections().map(function(item) {
          return wrapSelection(editor, item);
        });
      }
    }
  };

  wrapSelection = function(editor, selection) {
    var editorView, endTagSelection, newEndTagSelectRange, newStartTagSelectRange, newText, range, tag, tagRangePos, text;
    tag = 'p';
    text = selection.getText();
    tagRangePos = selection.getBufferRange();
    newText = ['<', tag, '>', text, '</', tag, '>'].join('');
    range = {
      start: {
        from: [tagRangePos.start.row, tagRangePos.start.column + 1],
        to: [tagRangePos.start.row, tagRangePos.start.column + 2]
      },
      end: {
        from: [tagRangePos.end.row, tagRangePos.end.column + 5],
        to: [tagRangePos.end.row, tagRangePos.end.column + 6]
      }
    };
    if (range.end.from[0] > range.start.from[0]) {
      range.end.from[1] = range.end.from[1] - 3;
      range.end.to[1] = range.end.to[1] - 3;
    }
    newStartTagSelectRange = [range.start.from, range.start.to];
    newEndTagSelectRange = [range.end.from, range.end.to];
    selection.insertText(newText);
    selection.cursor.setBufferPosition([tagRangePos.start.row, tagRangePos.start.column + 1]);
    editor.addSelectionForBufferRange(newStartTagSelectRange);
    endTagSelection = editor.addSelectionForBufferRange(newEndTagSelectRange);
    editorView = atom.views.getView(editor);
    return editorView.addEventListener('keydown', function(event) {
      if (event.keyCode === 32) {
        endTagSelection.cursor.marker.destroy();
        return this.removeEventListener('keydown', arguments.callee);
      }
    });
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvbHVpei5jYXJyYXJvLy5hdG9tL3BhY2thZ2VzL2F0b20td3JhcC1pbi10YWcvbGliL3dyYXAtaW4tdGFnLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBTSxDQUFDLE9BQVAsR0FFRTtJQUFBLFFBQUEsRUFBVSxTQUFDLEtBQUQ7YUFFUixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQWQsQ0FBa0IsZ0JBQWxCLEVBQW9DO1FBQUEsa0JBQUEsRUFBb0IsQ0FBQSxTQUFBLEtBQUE7aUJBQUEsU0FBQTttQkFBRyxLQUFDLENBQUEsSUFBRCxDQUFBO1VBQUg7UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXBCO09BQXBDO0lBRlEsQ0FBVjtJQUlBLElBQUEsRUFBTSxTQUFBO0FBQ0osVUFBQTtNQUFBLElBQUcsTUFBQSxHQUFTLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQWYsQ0FBQSxDQUFaO2VBQ0UsTUFBTSxDQUFDLGFBQVAsQ0FBQSxDQUFzQixDQUFDLEdBQXZCLENBQTJCLFNBQUMsSUFBRDtpQkFBVSxhQUFBLENBQWMsTUFBZCxFQUFzQixJQUF0QjtRQUFWLENBQTNCLEVBREY7O0lBREksQ0FKTjs7O0VBUUYsYUFBQSxHQUFnQixTQUFDLE1BQUQsRUFBUyxTQUFUO0FBQ2QsUUFBQTtJQUFBLEdBQUEsR0FBTTtJQUNOLElBQUEsR0FBTyxTQUFTLENBQUMsT0FBVixDQUFBO0lBQ1AsV0FBQSxHQUFjLFNBQVMsQ0FBQyxjQUFWLENBQUE7SUFFZCxPQUFBLEdBQVUsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLEdBQVgsRUFBZ0IsSUFBaEIsRUFBc0IsSUFBdEIsRUFBNEIsR0FBNUIsRUFBaUMsR0FBakMsQ0FBcUMsQ0FBQyxJQUF0QyxDQUEyQyxFQUEzQztJQUVWLEtBQUEsR0FDRTtNQUFBLEtBQUEsRUFDRTtRQUFBLElBQUEsRUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBbkIsRUFBd0IsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFsQixHQUF5QixDQUFqRCxDQUFOO1FBQ0EsRUFBQSxFQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFuQixFQUF3QixXQUFXLENBQUMsS0FBSyxDQUFDLE1BQWxCLEdBQXlCLENBQWpELENBREo7T0FERjtNQUdBLEdBQUEsRUFDRTtRQUFBLElBQUEsRUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBakIsRUFBc0IsV0FBVyxDQUFDLEdBQUcsQ0FBQyxNQUFoQixHQUF1QixDQUE3QyxDQUFOO1FBQ0EsRUFBQSxFQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFqQixFQUFzQixXQUFXLENBQUMsR0FBRyxDQUFDLE1BQWhCLEdBQXVCLENBQTdDLENBREo7T0FKRjs7SUFPRixJQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBZixHQUFvQixLQUFLLENBQUMsS0FBSyxDQUFDLElBQUssQ0FBQSxDQUFBLENBQXhDO01BQ0UsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFLLENBQUEsQ0FBQSxDQUFmLEdBQW9CLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBZixHQUFvQjtNQUN4QyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUcsQ0FBQSxDQUFBLENBQWIsR0FBa0IsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFHLENBQUEsQ0FBQSxDQUFiLEdBQWtCLEVBRnRDOztJQUlBLHNCQUFBLEdBQXlCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFiLEVBQW1CLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBL0I7SUFDekIsb0JBQUEsR0FBdUIsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQVgsRUFBaUIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUEzQjtJQUV2QixTQUFTLENBQUMsVUFBVixDQUFxQixPQUFyQjtJQUNBLFNBQVMsQ0FBQyxNQUFNLENBQUMsaUJBQWpCLENBQW1DLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFuQixFQUF3QixXQUFXLENBQUMsS0FBSyxDQUFDLE1BQWxCLEdBQXlCLENBQWpELENBQW5DO0lBQ0EsTUFBTSxDQUFDLDBCQUFQLENBQWtDLHNCQUFsQztJQUNBLGVBQUEsR0FBa0IsTUFBTSxDQUFDLDBCQUFQLENBQWtDLG9CQUFsQztJQUVsQixVQUFBLEdBQWEsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFYLENBQW1CLE1BQW5CO1dBQ2IsVUFBVSxDQUFDLGdCQUFYLENBQTRCLFNBQTVCLEVBQXVDLFNBQUMsS0FBRDtNQUNyQyxJQUFHLEtBQUssQ0FBQyxPQUFOLEtBQWlCLEVBQXBCO1FBQ0UsZUFBZSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBOUIsQ0FBQTtlQUNBLElBQUMsQ0FBQSxtQkFBRCxDQUFxQixTQUFyQixFQUFnQyxTQUFTLENBQUMsTUFBMUMsRUFGRjs7SUFEcUMsQ0FBdkM7RUE1QmM7QUFWaEIiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9XG5cbiAgYWN0aXZhdGU6IChzdGF0ZSkgLT5cblxuICAgIGF0b20uY29tbWFuZHMuYWRkICdhdG9tLXdvcmtzcGFjZScsICd3cmFwLWluLXRhZzp3cmFwJzogPT4gQHdyYXAoKVxuXG4gIHdyYXA6IC0+XG4gICAgaWYgZWRpdG9yID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpXG4gICAgICBlZGl0b3IuZ2V0U2VsZWN0aW9ucygpLm1hcCgoaXRlbSkgLT4gd3JhcFNlbGVjdGlvbihlZGl0b3IsIGl0ZW0pKVxuXG53cmFwU2VsZWN0aW9uID0gKGVkaXRvciwgc2VsZWN0aW9uKSAtPlxuICB0YWcgPSAncCdcbiAgdGV4dCA9IHNlbGVjdGlvbi5nZXRUZXh0KClcbiAgdGFnUmFuZ2VQb3MgPSBzZWxlY3Rpb24uZ2V0QnVmZmVyUmFuZ2UoKVxuXG4gIG5ld1RleHQgPSBbJzwnLCB0YWcsICc+JywgdGV4dCwgJzwvJywgdGFnLCAnPiddLmpvaW4oJycpXG5cbiAgcmFuZ2UgPVxuICAgIHN0YXJ0OlxuICAgICAgZnJvbTogW3RhZ1JhbmdlUG9zLnN0YXJ0LnJvdywgdGFnUmFuZ2VQb3Muc3RhcnQuY29sdW1uKzFdXG4gICAgICB0bzogW3RhZ1JhbmdlUG9zLnN0YXJ0LnJvdywgdGFnUmFuZ2VQb3Muc3RhcnQuY29sdW1uKzJdXG4gICAgZW5kOlxuICAgICAgZnJvbTogW3RhZ1JhbmdlUG9zLmVuZC5yb3csIHRhZ1JhbmdlUG9zLmVuZC5jb2x1bW4rNV0sXG4gICAgICB0bzogW3RhZ1JhbmdlUG9zLmVuZC5yb3csIHRhZ1JhbmdlUG9zLmVuZC5jb2x1bW4rNl1cblxuICBpZiByYW5nZS5lbmQuZnJvbVswXSA+IHJhbmdlLnN0YXJ0LmZyb21bMF1cbiAgICByYW5nZS5lbmQuZnJvbVsxXSA9IHJhbmdlLmVuZC5mcm9tWzFdIC0gM1xuICAgIHJhbmdlLmVuZC50b1sxXSA9IHJhbmdlLmVuZC50b1sxXSAtIDNcblxuICBuZXdTdGFydFRhZ1NlbGVjdFJhbmdlID0gW3JhbmdlLnN0YXJ0LmZyb20sIHJhbmdlLnN0YXJ0LnRvXVxuICBuZXdFbmRUYWdTZWxlY3RSYW5nZSA9IFtyYW5nZS5lbmQuZnJvbSwgcmFuZ2UuZW5kLnRvXVxuXG4gIHNlbGVjdGlvbi5pbnNlcnRUZXh0KG5ld1RleHQpXG4gIHNlbGVjdGlvbi5jdXJzb3Iuc2V0QnVmZmVyUG9zaXRpb24oW3RhZ1JhbmdlUG9zLnN0YXJ0LnJvdywgdGFnUmFuZ2VQb3Muc3RhcnQuY29sdW1uKzFdKVxuICBlZGl0b3IuYWRkU2VsZWN0aW9uRm9yQnVmZmVyUmFuZ2UobmV3U3RhcnRUYWdTZWxlY3RSYW5nZSlcbiAgZW5kVGFnU2VsZWN0aW9uID0gZWRpdG9yLmFkZFNlbGVjdGlvbkZvckJ1ZmZlclJhbmdlKG5ld0VuZFRhZ1NlbGVjdFJhbmdlKVxuXG4gIGVkaXRvclZpZXcgPSBhdG9tLnZpZXdzLmdldFZpZXcgZWRpdG9yXG4gIGVkaXRvclZpZXcuYWRkRXZlbnRMaXN0ZW5lciAna2V5ZG93bicsIChldmVudCkgLT5cbiAgICBpZiBldmVudC5rZXlDb2RlIGlzIDMyXG4gICAgICBlbmRUYWdTZWxlY3Rpb24uY3Vyc29yLm1hcmtlci5kZXN0cm95KClcbiAgICAgIEByZW1vdmVFdmVudExpc3RlbmVyICdrZXlkb3duJywgYXJndW1lbnRzLmNhbGxlZTtcbiJdfQ==
